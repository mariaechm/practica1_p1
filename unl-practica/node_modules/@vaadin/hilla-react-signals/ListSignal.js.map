{"version":3,"file":"ListSignal.js","sourceRoot":"","sources":["src/ListSignal.ts"],"names":[],"mappings":"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","sourcesContent":["import { CollectionSignal } from './CollectionSignal.js';\nimport {\n  createInsertLastStateEvent,\n  createRemoveStateEvent,\n  type InsertLastStateEvent,\n  isInsertLastStateEvent,\n  isListSnapshotStateEvent,\n  isRemoveStateEvent,\n  type ListSnapshotStateEvent,\n  type RemoveStateEvent,\n  type StateEvent,\n} from './events.js';\nimport {\n  $createOperation,\n  $processServerResponse,\n  $resolveOperation,\n  $setValueQuietly,\n  $update,\n  type Operation,\n  type ServerConnectionConfig,\n} from './FullStackSignal.js';\nimport { ValueSignal } from './ValueSignal.js';\n\ntype EntryId = string;\ntype Entry<T> = {\n  id: EntryId;\n  value: ValueSignal<T>;\n  next?: EntryId;\n  prev?: EntryId;\n};\n\n/**\n * A {@link FullStackSignal} that represents a shared list of values, where each\n * value is represented by a {@link ValueSignal}.\n * The list can be modified by calling the defined methods to insert or remove\n * items, but the `value` property of a `ListSignal` instance is read-only and\n * cannot be assigned directly.\n * The value of each item in the list can be manipulated similar to a regular\n * {@link ValueSignal}.\n *\n * @typeParam T - The type of the values in the list.\n */\nexport class ListSignal<T> extends CollectionSignal<ReadonlyArray<ValueSignal<T>>> {\n  #head?: EntryId;\n  #tail?: EntryId;\n\n  readonly #values = new Map<string, Entry<T>>();\n\n  constructor(config: ServerConnectionConfig) {\n    const initialValue: Array<ValueSignal<T>> = [];\n    super(initialValue, config);\n  }\n\n  #computeItems(): ReadonlyArray<ValueSignal<T>> {\n    let current = this.#head;\n    const result: Array<ValueSignal<T>> = [];\n    while (current !== undefined) {\n      const entry = this.#values.get(current)!;\n      result.push(entry.value);\n      current = entry.next;\n    }\n    return result;\n  }\n\n  protected override [$processServerResponse](event: StateEvent): void {\n    if (!event.accepted) {\n      this[$resolveOperation](\n        event.id,\n        `Server rejected the operation with id '${event.id}'. See the server log for more details.`,\n      );\n      return;\n    }\n    if (isListSnapshotStateEvent<T>(event)) {\n      this.#handleSnapshotEvent(event);\n    } else if (isInsertLastStateEvent<T>(event)) {\n      this.#handleInsertLastUpdate(event);\n    } else if (isRemoveStateEvent(event)) {\n      this.#handleRemoveUpdate(event);\n    }\n    this[$resolveOperation](event.id);\n  }\n\n  #handleInsertLastUpdate(event: InsertLastStateEvent<T>): void {\n    if (event.entryId === undefined) {\n      throw new Error('Unexpected state: Entry id should be defined when insert last event is accepted');\n    }\n    const valueSignal = new ValueSignal<T>(\n      event.value,\n      { ...this.server.config, parentClientSignalId: this.id },\n      event.entryId,\n    );\n    const newEntry: Entry<T> = { id: valueSignal.id, value: valueSignal };\n\n    if (this.#head === undefined) {\n      this.#head = newEntry.id;\n      this.#tail = this.#head;\n    } else {\n      const tailEntry = this.#values.get(this.#tail!)!;\n      tailEntry.next = newEntry.id;\n      newEntry.prev = this.#tail;\n      this.#tail = newEntry.id;\n    }\n    this.#values.set(valueSignal.id, newEntry);\n    this[$setValueQuietly](this.#computeItems());\n  }\n\n  #handleRemoveUpdate(event: RemoveStateEvent): void {\n    const entryToRemove = this.#values.get(event.entryId);\n    if (entryToRemove === undefined) {\n      return;\n    }\n    this.#values.delete(event.id);\n    if (this.#head === entryToRemove.id) {\n      if (entryToRemove.next === undefined) {\n        this.#head = undefined;\n        this.#tail = undefined;\n      } else {\n        const newHead = this.#values.get(entryToRemove.next)!;\n        this.#head = newHead.id;\n        newHead.prev = undefined;\n      }\n    } else {\n      const prevEntry = this.#values.get(entryToRemove.prev!)!;\n      const nextEntry = entryToRemove.next !== undefined ? this.#values.get(entryToRemove.next) : undefined;\n      if (nextEntry === undefined) {\n        this.#tail = prevEntry.id;\n        prevEntry.next = undefined;\n      } else {\n        prevEntry.next = nextEntry.id;\n        nextEntry.prev = prevEntry.id;\n      }\n    }\n    this[$setValueQuietly](this.#computeItems());\n  }\n\n  #handleSnapshotEvent(event: ListSnapshotStateEvent<T>): void {\n    event.entries.forEach((entry) => {\n      this.#values.set(entry.id, {\n        id: entry.id,\n        prev: entry.prev,\n        next: entry.next,\n        value: new ValueSignal(entry.value, { ...this.server.config, parentClientSignalId: this.id }, entry.id),\n      });\n      if (entry.prev === undefined) {\n        this.#head = entry.id;\n      }\n      if (entry.next === undefined) {\n        this.#tail = entry.id;\n      }\n    });\n    this[$setValueQuietly](this.#computeItems());\n  }\n\n  /**\n   * Inserts a new value at the end of the list.\n   * @param value - The value to insert.\n   * @returns An operation object that allows to perform additional actions.\n   */\n  insertLast(value: T): Operation {\n    const event = createInsertLastStateEvent(value);\n    const promise = this[$update](event);\n    return this[$createOperation]({ id: event.id, promise });\n  }\n\n  /**\n   * Removes the given item from the list.\n   * @param item - The item to remove.\n   * @returns An operation object that allows to perform additional actions.\n   */\n  remove(item: ValueSignal<T>): Operation {\n    const entryToRemove = this.#values.get(item.id);\n    if (entryToRemove === undefined) {\n      return { result: Promise.resolve() };\n    }\n    const removeEvent = createRemoveStateEvent(entryToRemove.value.id);\n    const promise = this[$update](removeEvent);\n    return this[$createOperation]({ id: removeEvent.id, promise });\n  }\n}\n"]}