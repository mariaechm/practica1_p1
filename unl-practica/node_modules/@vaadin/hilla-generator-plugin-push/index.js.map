{"mappings":"AAAA,OAAO,oDAAqD;AAI5D,SAAkC,yCAA0C;AAK5E,MAAMA,mBAAsC,CAC1C,+CACA,6DACD;AAED,eAAe,MAAM,mBAAmB,OAAO;;;;CAI7C,OAAOC,yBAAyBC,OAAkD;AAChF,SAAO,OAAO,QAAQ,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK;GACxD,MAAM,WAAW,MAAM,MAAM,UAAU;GACvC,MAAM,SAAS,UAAU,UAAU,qBAAqB;GACxD,MAAM,YAAY,SAAS;GAC3B,MAAM,GAAG,UAAU,OAAO,GAAG,IAAI,MAAM,IAAI;AAE3C,OAAI,aAAa,iBAAiB,SAAS,UAAU,EAAE;AACrD,QAAI,IAAI,IAAI,SAAS,EAAE;AACrB,SAAI,IAAI,SAAS,CAAE,eAAe,KAAK,OAAO;IAC/C,OAAM;AACL,SAAI,IAAI,UAAU;MAAE,gBAAgB,CAAC,MAAO;MAAE,kBAAkB;KAAM,EAAC;IACxE;GACF,OAAM;AAGL,QAAI,IAAI,IAAI,SAAS,EAAE;AACrB,SAAI,IAAI,SAAS,CAAE,mBAAmB;IACvC,OAAM;AACL,SAAI,IAAI,UAAU;MAAE,gBAAgB,CAAE;MAAE,kBAAkB;KAAO,EAAC;IACnE;GACF;AAED,UAAO;EACR,GAAE,IAAI,MAAkC;CAC1C;CAID,IAAa,OAAe;AAC1B,SAAO,OAAO,KAAK;CACpB;CAGD,MAAe,QAAQC,SAAuC;EAC5D,MAAM,EAAE,KAAK,SAAS,GAAG;EACzB,MAAM,oBAAoB,KAAK,YAAYF,yBAAyB,IAAI,MAAM;AAE9E,OAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;GACvC,MAAM,EAAE,UAAU,GAAG,QAAQ;GAC7B,MAAM,WAAW,SAAS,UAAU,GAAG,SAAS,QAAQ,MAAM,CAAC;AAE/D,OAAI,kBAAkB,IAAI,SAAS,EAAE;AACnC,YAAQ,KAAK,IAAI,cAAc,QAAQ,IAAI,kBAAkB,IAAI,SAAS,EAAG,SAAS;GACvF;EACF;CACF;AACF","names":["classesToReplace: readonly string[]","#collectPatchableMethods","paths: ReadonlyObjectDeep<OpenAPIV3.PathsObject>","storage: SharedStorage"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-plugin-push/src/index.ts"],"sourcesContent":["import Plugin from '@vaadin/hilla-generator-core/Plugin.js';\nimport type { SharedStorage } from '@vaadin/hilla-generator-core/SharedStorage.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyObjectDeep } from 'type-fest/source/readonly-deep';\nimport { type EndpointOperations, PushProcessor } from './PushProcessor.js';\n\ntype ExtendedMediaTypeSchema = Readonly<{ 'x-class-name': string }> &\n  ReadonlyObjectDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject>;\n\nconst classesToReplace: readonly string[] = [\n  'com.vaadin.hilla.runtime.transfertypes.Flux',\n  'com.vaadin.hilla.runtime.transfertypes.EndpointSubscription',\n];\n\nexport default class PushPlugin extends Plugin {\n  /**\n   * Collects methods that must be patched by checking their `x-class-name` value\n   */\n  static #collectPatchableMethods(paths: ReadonlyObjectDeep<OpenAPIV3.PathsObject>) {\n    return Object.entries(paths).reduce((acc, [key, path]) => {\n      const response = path?.post?.responses[200] as ReadonlyObjectDeep<OpenAPIV3.ResponseObject> | undefined;\n      const schema = response?.content?.['application/json']?.schema as ExtendedMediaTypeSchema | undefined;\n      const className = schema?.['x-class-name'];\n      const [, endpoint, method] = key.split('/');\n\n      if (className && classesToReplace.includes(className)) {\n        if (acc.has(endpoint)) {\n          acc.get(endpoint)!.methodsToPatch.push(method);\n        } else {\n          acc.set(endpoint, { methodsToPatch: [method], removeInitImport: true });\n        }\n      } else {\n        // Not all methods will be patched, let's keep the init import\n        // eslint-disable-next-line no-lonely-if\n        if (acc.has(endpoint)) {\n          acc.get(endpoint)!.removeInitImport = false;\n        } else {\n          acc.set(endpoint, { methodsToPatch: [], removeInitImport: false });\n        }\n      }\n\n      return acc;\n    }, new Map<string, EndpointOperations>());\n  }\n\n  declare ['constructor']: typeof PushPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async execute(storage: SharedStorage): Promise<void> {\n    const { api, sources } = storage;\n    const endpointMethodMap = this.constructor.#collectPatchableMethods(api.paths);\n\n    for (let i = 0; i < sources.length; i++) {\n      const { fileName } = sources[i];\n      const endpoint = fileName.substring(0, fileName.indexOf('.ts'));\n\n      if (endpointMethodMap.has(endpoint)) {\n        sources[i] = new PushProcessor(sources[i], endpointMethodMap.get(endpoint)!).process();\n      }\n    }\n  }\n}\n"],"version":3}