{"mappings":"AAAA,OAAO,oDAAqD;AAG5D,OAAO,2CAA4C;AAGnD,MAAM,cAAc,aAAa;CAC/B,MAAM,EAAE,mBAAmB,GAAG,MAAM,OAAO;AAC3C,oBAAmB;AACpB;AAOD,MAAM,iBAAiB;CACrB;CACA;CACA;AACD;AAED,SAAS,8CAA8CA,SAA0C;AAC/F,QAAO,OAAO,QAAQ,QAAQ,IAAI,MAAM,CACrC,OAAO,CAAC,CAAC,GAAG,WAAW,KAAK;EAC3B,MAAM,cAAc,YAAY,MAAM,UAAU;AAChD,SAAO,iBAAiB,UAAU;CACnC,EAAC,CACD,QAAQ,CAAC,CAAC,MAAM,WAAW,KAAK;EAC/B,MAAM,cAAc,YAAY,MAAM,UAAU;EAChD,MAAM,iBAAkB,YAAyC,UAAU,qBAAqB;AAEhG,SAAO,kBAAkB,WAAW,iBAChC,eAAe,OACX,OAAO,CAAC,MAAM,UAAU,KAAK,EAAE,QAAQ,eAAe,SAAS,EAAE,KAAK,CAAC,CACxE,IAAI,CAACC,OAA2D;GAC/D;GACA,YAAY,UAAU,IAAI,EAAE,OAAO;EACpC,GAAE,GACL,CAAE;CACP,EAAC,CACD,OAAO,CAAC,gBAAgB,eAAe,KAAK;AAChD;AAED,SAAS,eAAeC,SAAsE;AAC5F,QAAO,QAAQ,OAAO,CAAC,YAAY,WAAW;EAC5C,MAAM,CAAC,GAAG,SAAS,OAAO,GAAG,OAAO,KAAK,MAAM,IAAI;EACnD,MAAM,iBAAiB,WAAW,IAAI,QAAQ,IAAI,IAAI;AACtD,iBAAe,IAAI,QAAQ,OAAO,WAAW;AAC7C,aAAW,IAAI,SAAS,eAAe;AACvC,SAAO;CACR,GAAE,IAAI,MAAmC;AAC3C;AAED,eAAe,MAAM,sBAAsB,OAAO;CAEhD,MAAe,QAAQC,eAA6C;EAClE,MAAM,qBAAqB,8CAA8C,cAAc;EACvF,MAAM,WAAW,eAAe,mBAAmB;AACnD,WAAS,QAAQ,CAAC,SAAS,YAAY;GACrC,MAAM,QAAQ,cAAc,QAAQ,UAAU,CAAC,WAAW,OAAO,cAAc,EAAE,QAAQ,KAAK;AAC9F,OAAI,SAAS,GAAG;AACd,kBAAc,QAAQ,SAAS,IAAI,gBACjC,SACA,SACA,cAAc,QAAQ,QACtB,MACA,SAAS;GACZ;EACF,EAAC;CACH;CAID,IAAa,OAAe;AAC1B,SAAO,OAAO,KAAK;CACpB;AACF","names":["storage: SharedStorage","c: OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject","signals: readonly PathSignalType[]","sharedStorage: SharedStorage"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-plugin-signals/src/index.ts"],"sourcesContent":["import Plugin from '@vaadin/hilla-generator-core/Plugin.js';\nimport type { SharedStorage } from '@vaadin/hilla-generator-core/SharedStorage.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport SignalProcessor from './SignalProcessor.js';\n\n// Polyfill for iterator helpers (Stage 3 proposal)\nif (!('Iterator' in globalThis)) {\n  const { installIntoGlobal } = await import('iterator-helpers-polyfill');\n  installIntoGlobal();\n}\n\nexport type PathSignalType = Readonly<{\n  path: string;\n  signalType: string;\n}>;\n\nconst SIGNAL_CLASSES = [\n  '#/components/schemas/com.vaadin.hilla.signals.NumberSignal',\n  '#/components/schemas/com.vaadin.hilla.signals.ValueSignal',\n  '#/components/schemas/com.vaadin.hilla.signals.ListSignal',\n];\n\nfunction extractEndpointMethodsWithSignalsAsReturnType(storage: SharedStorage): PathSignalType[] {\n  return Object.entries(storage.api.paths)\n    .filter(([_, pathObject]) => {\n      const response200 = pathObject?.post?.responses['200'];\n      return response200 && !('$ref' in response200);\n    })\n    .flatMap(([path, pathObject]) => {\n      const response200 = pathObject?.post?.responses['200'];\n      const responseSchema = (response200 as OpenAPIV3.ResponseObject).content?.['application/json']?.schema;\n\n      return responseSchema && 'anyOf' in responseSchema\n        ? responseSchema.anyOf\n            ?.filter((c) => '$ref' in c && c.$ref && SIGNAL_CLASSES.includes(c.$ref))\n            .map((c: OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject) => ({\n              path,\n              signalType: '$ref' in c ? c.$ref : '',\n            }))\n        : [];\n    })\n    .filter((signalArray) => signalArray != null);\n}\n\nfunction groupByService(signals: readonly PathSignalType[]): Map<string, Map<string, string>> {\n  return signals.reduce((serviceMap, signal) => {\n    const [_, service, method] = signal.path.split('/');\n    const serviceMethods = serviceMap.get(service) ?? new Map<string, string>();\n    serviceMethods.set(method, signal.signalType);\n    serviceMap.set(service, serviceMethods);\n    return serviceMap;\n  }, new Map<string, Map<string, string>>());\n}\n\nexport default class SignalsPlugin extends Plugin {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async execute(sharedStorage: SharedStorage): Promise<void> {\n    const methodsWithSignals = extractEndpointMethodsWithSignalsAsReturnType(sharedStorage);\n    const services = groupByService(methodsWithSignals);\n    services.forEach((methods, service) => {\n      const index = sharedStorage.sources.findIndex((source) => source.fileName === `${service}.ts`);\n      if (index >= 0) {\n        sharedStorage.sources[index] = new SignalProcessor(\n          service,\n          methods,\n          sharedStorage.sources[index],\n          this,\n        ).process();\n      }\n    });\n  }\n\n  declare ['constructor']: typeof SignalsPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n}\n"],"version":3}