{"mappings":"AAAA,SAAS,yBAAoC;AAE7C,SAAgC,UAAoC,iCAAkC;AACtG,SAA2B,iCAAkC;;AAuB7D,SAAS,eAAe,EAAE,cAAc,QAAQ,SAA8B,EAAsB;CAClG,MAAM,EACJ,OAAO,EAAE,cAAc,SAAS,EAChC,WACD,GAAG,WAAW,YAAY;CAE3B,MAAM,WAAW,aAAa;AAE9B,KAAI,gBAAgB,SAAS;AAC3B,SAAO;GAAC;;;CAAU;CACnB;AAED,MAAK,UAAU,OAAO,EAAE;AACtB,SAAO,KAAC;GAAS,IAAI;GAAc,OAAO,EAAE,MAAM,SAAU;GAAE;IAAU;CACzE;AAED,QAAO;AACR;AAED,eAAe,OAAO;AAEtB,UAAU,SAAgCA,QAAiD;AACzF,MAAK,MAAM,SAAS,QAAQ;AAC1B,QAAM;AACN,MAAI,MAAM,UAAU;AAClB,UAAO,SAAS,MAAM,SAAgB;EACvC;CACF;AACF;;;;;;;;;;;;AAaD,OAAO,SAAS,aAAaC,OAA4BC,eAAuB,UAA+B;CAC7G,MAAM,EAAE,QAAQ,GAAG;CACnB,MAAM,eAAe,QAAQ,iBAAiB,QAAQ,iBAAiB,QAAQ,cAAc;AAE7F,KAAI,cAAc;AAChB,QAAM,UACJ,KAAC;GACe;GACd,QAAQ;GACR,SAAS,MAAM;IACf;CAEL;AAED,QAAO;AACR;;;;;;;;;AAUD,OAAO,SAAS,cAAcC,QAA+BD,eAAuB,UAAiC;AACnH,MAAK,MAAM,SAAS,SAAS,OAAO,EAAE;AACpC,eAAa,OAAO,aAAa;CAClC;AAED,QAAO;AACR","names":["routes: T[]","route: RouteObjectWithAuth","redirectPath: string","routes: RouteObjectWithAuth[]"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/react-auth/src/ProtectedRoute.tsx"],"sourcesContent":["import { useContext, type JSX } from 'react';\nimport type { RouteObject } from 'react-router';\nimport { type IndexRouteObject, Navigate, type NonIndexRouteObject, useLocation } from 'react-router';\nimport { type AccessProps, AuthContext } from './useAuth.js';\n\ntype CustomMetadata = Record<string, any>;\n\ntype HandleWithAuth = Readonly<{ handle?: AccessProps & CustomMetadata }>;\n\ntype Override<T, E> = E & Omit<T, keyof E>;\n\ntype IndexRouteObjectWithAuth = Override<IndexRouteObject, HandleWithAuth>;\ntype NonIndexRouteObjectWithAuth = Override<\n  Override<NonIndexRouteObject, HandleWithAuth>,\n  {\n    children?: RouteObjectWithAuth[];\n  }\n>;\nexport type RouteObjectWithAuth = IndexRouteObjectWithAuth | NonIndexRouteObjectWithAuth;\n\ninterface ProtectedRouteProps {\n  redirectPath: string;\n  access: AccessProps;\n  element: JSX.Element;\n}\n\nfunction ProtectedRoute({ redirectPath, access, element }: ProtectedRouteProps): JSX.Element | null {\n  const {\n    state: { initializing, loading },\n    hasAccess,\n  } = useContext(AuthContext);\n\n  const location = useLocation();\n\n  if (initializing || loading) {\n    return <div></div>;\n  }\n\n  if (!hasAccess(access)) {\n    return <Navigate to={redirectPath} state={{ from: location }} replace />;\n  }\n\n  return element;\n}\n\nProtectedRoute.type = 'ProtectedRoute'; // This is for copilot to recognize this\n\nfunction* traverse<T extends RouteObject>(routes: T[]): Generator<T, undefined, undefined> {\n  for (const route of routes) {\n    yield route;\n    if (route.children) {\n      yield* traverse(route.children as T[]);\n    }\n  }\n}\n\n/**\n * Adds protection to a single route that requires authentication.\n * These route should contain the {@link AccessProps.loginRequired} and/or\n * {@link AccessProps.rolesAllowed} property to get the protection. Route\n * without that property won't be protected.\n *\n * @param route - the route to protect\n * @param redirectPath - the path to redirect to if the route is protected\n * and the user is not authenticated.\n * @returns the route extended with protection if needed\n */\nexport function protectRoute(route: RouteObjectWithAuth, redirectPath: string = '/login'): RouteObjectWithAuth {\n  const { handle } = route;\n  const requiresAuth = handle?.loginRequired ?? handle?.requiresLogin ?? handle?.rolesAllowed?.length;\n\n  if (requiresAuth) {\n    route.element = (\n      <ProtectedRoute\n        redirectPath={redirectPath}\n        access={handle as AccessProps}\n        element={route.element as JSX.Element}\n      />\n    );\n  }\n\n  return route;\n}\n\n/**\n * Protects a route tree with {@link protectRoute} function.\n *\n * @param routes - the roots of the route tree that requires protection.\n * @param redirectPath - the path to redirect to if the route is\n * protected and the user is not authenticated.\n * @returns the protected route tree\n */\nexport function protectRoutes(routes: RouteObjectWithAuth[], redirectPath: string = '/login'): RouteObjectWithAuth[] {\n  for (const route of traverse(routes)) {\n    protectRoute(route, redirectPath);\n  }\n\n  return routes;\n}\n"],"version":3}