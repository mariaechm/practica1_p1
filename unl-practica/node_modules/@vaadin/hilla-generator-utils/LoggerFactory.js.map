{"mappings":"AAAA,OAAO,gBAAkC;AACzC,OAAO,6BAA8B;AASrC,eAAe,MAAM,cAAc;CACjC,AAASA,YAAY,IAAI;CACzB,AAASC;CAET,YAAY,EAAE,MAAM,SAAwB,EAAE;EAC5C,MAAM,SAAS,WAAW,EACxB,QAAQ,OACT,EAAC;AAEF,OAAKA,UAAU,KACb;GACE,MAAM;GACN,OAAO,UAAU,UAAU;GAC3B,MAAM,QAAQ;EACf,GACD,OACD;CACF;CAED,IAAI,SAAiB;AACnB,SAAO,KAAKA;CACb;CAED,IAAIC,QAAwB;AAC1B,MAAI,KAAKF,UAAU,IAAI,OAAO,EAAE;AAC9B,UAAO,KAAKA,UAAU,IAAI,OAAO;EAClC;EAED,MAAM,QAAQ,KAAKC,QAAQ,MAAM,EAAE,OAAQ,EAAC;AAC5C,OAAKD,UAAU,IAAI,QAAQ,MAAM;AACjC,SAAO;CACR;AACF","names":["#children","#logger","caller: string"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-utils/src/LoggerFactory.ts"],"sourcesContent":["import Pino, { type Logger } from 'pino';\nimport PinoPretty from 'pino-pretty';\n\nexport { type Logger };\n\nexport type LoggerOptions = Readonly<{\n  name?: string;\n  verbose?: boolean;\n}>;\n\nexport default class LoggerFactory {\n  readonly #children = new Map<string, Logger>();\n  readonly #logger: Logger;\n\n  constructor({ name, verbose }: LoggerOptions) {\n    const pretty = PinoPretty({\n      ignore: 'time',\n    });\n\n    this.#logger = Pino(\n      {\n        base: undefined,\n        level: verbose ? 'debug' : 'info',\n        name: name ?? 'tsgen',\n      },\n      pretty,\n    );\n  }\n\n  get global(): Logger {\n    return this.#logger;\n  }\n\n  for(caller: string): Logger {\n    if (this.#children.has(caller)) {\n      return this.#children.get(caller)!;\n    }\n\n    const child = this.#logger.child({ caller });\n    this.#children.set(caller, child);\n    return child;\n  }\n}\n"],"version":3}