{"mappings":"AAAA,OAAO,oBAOa;AAapB,OAAO,SAAS,SACdA,MACAC,wBACAC,cAC0B;CAC1B,IAAIC;AAEJ,KAAI,MAAM,QAAQ,uBAAuB,EAAE;AAEzC,iBAAe;CAChB,OAAM;AACL,aAAW;CACZ;CAED,IAAI,aAAa,GAAG,iBAAiB,QAAQ,MAAM,GAAG,aAAa,QAAQ,MAAM;AAEjF,KAAI,cAAc;AAChB,GAAC,WAAW,GAAG,GAAG,UAChB,YACA,aACD,CAAC;CACH;AAED,QAAO,WAAW,WAAW,WAAW,IAAI,WAAW;AACxD;AAED,OAAO,SAAS,UACdC,aACuB;AACvB,QAAO,CAACC,YAAmC,CAACC,SAAY;EACtD,MAAM,UAAU,CAACC,SAA8C;GAC7D,MAAM,cAAc,YAAY,KAAK;AAErC,OAAI,gBAAgB,MAAM;AACxB,WAAO;GACR;AAED,UAAO,GAAG,eAAe,aAAa,SAAS,QAAQ;EACxD;AACD,SAAO,GAAG,eAAe,MAAM,SAAS,QAAQ;CACjD;AACF;AAED,OAAO,SAAS,SAAyBA,MAAYC,SAAuD;CAC1G,SAAS,SAASC,GAAwB;AACxC,SAAO,QAAQ,EAAE,IAAI,GAAG,aAAa,GAAG,SAAS;CAClD;AAED,QAAO,SAAS,KAAK;AACtB","names":["code: string","selectorOrTransformers?: ReadonlyArray<TransformerFactory<SourceFile>> | TemplateSelector<T>","transformers?: ReadonlyArray<TransformerFactory<SourceFile>>","selector: TemplateSelector<T> | undefined","transformer: (node: Node) => VisitResult<Node | undefined>","context: TransformationContext","root: T","node: Node","visitor: (node: Node) => T | undefined","n: Node"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-utils/src/ast.ts"],"sourcesContent":["import ts, {\n  type Node,\n  type VisitResult,\n  type SourceFile,\n  type Statement,\n  type TransformationContext,\n  type TransformerFactory,\n} from 'typescript';\n\nexport type TemplateSelector<T> = (statements: readonly Statement[]) => T;\n\nexport function template(\n  code: string,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): readonly Statement[];\nexport function template<T>(\n  code: string,\n  selector: TemplateSelector<T>,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): T;\nexport function template<T>(\n  code: string,\n  selectorOrTransformers?: ReadonlyArray<TransformerFactory<SourceFile>> | TemplateSelector<T>,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): T | readonly Statement[] {\n  let selector: TemplateSelector<T> | undefined;\n\n  if (Array.isArray(selectorOrTransformers)) {\n    // eslint-disable-next-line no-param-reassign\n    transformers = selectorOrTransformers;\n  } else {\n    selector = selectorOrTransformers as TemplateSelector<T>;\n  }\n\n  let sourceFile = ts.createSourceFile('f.ts', code, ts.ScriptTarget.Latest, false);\n\n  if (transformers) {\n    [sourceFile] = ts.transform<SourceFile>(\n      sourceFile,\n      transformers as Array<TransformerFactory<SourceFile>>,\n    ).transformed;\n  }\n\n  return selector?.(sourceFile.statements) ?? sourceFile.statements;\n}\n\nexport function transform<T extends Node>(\n  transformer: (node: Node) => VisitResult<Node | undefined>,\n): TransformerFactory<T> {\n  return (context: TransformationContext) => (root: T) => {\n    const visitor = (node: Node): VisitResult<Node | undefined> => {\n      const transformed = transformer(node);\n\n      if (transformed !== node) {\n        return transformed;\n      }\n\n      return ts.visitEachChild(transformed, visitor, context);\n    };\n    return ts.visitEachChild(root, visitor, context);\n  };\n}\n\nexport function traverse<T extends Node>(node: Node, visitor: (node: Node) => T | undefined): T | undefined {\n  function _visitor(n: Node): T | undefined {\n    return visitor(n) ?? ts.forEachChild(n, _visitor);\n  }\n\n  return _visitor(node);\n}\n"],"version":3}