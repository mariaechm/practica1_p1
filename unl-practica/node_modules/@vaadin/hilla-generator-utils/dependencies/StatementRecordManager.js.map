{"mappings":"AAKA,eAAe,MAAe,uBAAqF;CACjH,OAAO,iBACLA,UACsE;AACtE,SAAO,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,KAAK;AAC3B,OAAI,MAAM,WAAW,IAAI,KAAK,MAAM,WAAW,IAAI,EAAE;AACnD,WAAO;GACR;AAED,QAAK,MAAM,WAAW,IAAI,IAAI,MAAM,WAAW,IAAI,EAAE;AACnD,YAAQ;GACT;AAED,UAAO,SAAS,QAAQ,OAAO,MAAM;EACtC;CACF;CAGD,AAASC;CAET,YAAYD,UAAyB;AACnC,OAAKC,YAAY;CAClB;CAID,SAAuB;EACrB,MAAM,UAAU,CAAC,GAAG,KAAK,kBAAkB,AAAC;AAC5C,UAAQ,KAAK,KAAK,YAAY,iBAAiB,KAAKA,UAAU,CAAC;AAE/D,SAAO,QAAQ,IAAI,CAAC,GAAG,UAAU,KAAK,UAAU;CACjD;AAGF","names":["collator: Intl.Collator","#collator"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-utils/src/dependencies/StatementRecordManager.ts"],"sourcesContent":["import type { Statement } from 'typescript';\nimport type CodeConvertable from './CodeConvertable.js';\n\nexport type StatementRecord<T extends Statement> = readonly [path: string, declaration: T];\n\nexport default abstract class StatementRecordManager<T extends Statement> implements CodeConvertable<readonly T[]> {\n  static createComparator<T extends Statement>(\n    collator: Intl.Collator,\n  ): (recordA: StatementRecord<T>, recordB: StatementRecord<T>) => number {\n    return ([pathA], [pathB]) => {\n      if (pathA.startsWith('.') && !pathB.startsWith('.')) {\n        return 1;\n      }\n\n      if (!pathA.startsWith('.') && pathB.startsWith('.')) {\n        return -1;\n      }\n\n      return collator.compare(pathA, pathB);\n    };\n  }\n\n  declare ['constructor']: typeof StatementRecordManager;\n  readonly #collator: Intl.Collator;\n\n  constructor(collator: Intl.Collator) {\n    this.#collator = collator;\n  }\n\n  abstract statementRecords(): IterableIterator<StatementRecord<T>>;\n\n  toCode(): readonly T[] {\n    const records = [...this.statementRecords()];\n    records.sort(this.constructor.createComparator(this.#collator));\n\n    return records.map(([, statement]) => statement);\n  }\n\n  abstract clear(): void;\n}\n"],"version":3}