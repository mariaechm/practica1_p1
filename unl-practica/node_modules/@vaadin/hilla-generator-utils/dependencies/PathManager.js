import { basename, dirname, posix, relative, sep } from "node:path";
import { fileURLToPath } from "node:url";
export default class PathManager {
	#options;
	constructor(options) {
		let extension;
		if (options?.extension) {
			extension = options.extension.startsWith(".") ? options.extension : `.${options.extension}`;
		}
		this.#options = {
			...options,
			extension,
			relativeTo: options?.relativeTo ?? "."
		};
	}
	get aliasRoot() {
		return this.#options.aliasRoot;
	}
	createBareModulePath(path, isFile = false) {
		const { extension } = this.#options;
		if (extension && isFile) {
			return `${path}.${extension}`;
		}
		return path;
	}
	createRelativePath(path, fileExtension, relativeTo = this.#options.relativeTo) {
		const { extension } = this.#options;
		const _path = path instanceof URL ? fileURLToPath(path) : path;
		let result = _path;
		if (extension && !_path.endsWith(extension)) {
			result = `${dirname(result)}/${basename(result, fileExtension)}${extension}`;
		}
		result = relative(relativeTo instanceof URL ? fileURLToPath(relativeTo) : relativeTo, result).replaceAll(sep, posix.sep);
		return result.startsWith(".") ? result : `./${result}`;
	}
	createTSAliasModulePath(path, root = this.#options.aliasRoot) {
		return root ? `${root}/${path}` : path;
	}
}
//# sourceMappingURL=./PathManager.js.map