{"mappings":"AAAA,SAAS,UAAU,SAAS,OAAO,UAAU,sBAAuB;AACpE,SAAS,+BAAgC;AASzC,eAAe,MAAM,YAAY;CAC/B,AAASA;CAET,YAAYC,SAA8B;EACxC,IAAIC;AAEJ,MAAI,SAAS,WAAW;AACtB,eAAY,QAAQ,UAAU,WAAW,IAAI,GAAG,QAAQ,aAAa,GAAG,QAAQ,UAAU;EAC3F;AAED,OAAKF,WAAW;GACd,GAAG;GACH;GACA,YAAY,SAAS,cAAc;EACpC;CACF;CAED,IAAI,YAAgC;AAClC,SAAO,KAAKA,SAAS;CACtB;CAED,qBAAqBG,MAAc,SAAS,OAAe;EACzD,MAAM,EAAE,WAAW,GAAG,KAAKH;AAE3B,MAAI,aAAa,QAAQ;AACvB,WAAQ,EAAE,KAAK,GAAG,UAAU;EAC7B;AAED,SAAO;CACR;CAED,mBACEI,MACAC,eACAC,aAA2B,KAAKN,SAAS,YACjC;EACR,MAAM,EAAE,WAAW,GAAG,KAAKA;EAC3B,MAAM,QAAQ,gBAAgB,MAAM,cAAc,KAAK,GAAG;EAC1D,IAAI,SAAS;AAEb,MAAI,cAAc,MAAM,SAAS,UAAU,EAAE;AAC3C,aAAU,EAAE,QAAQ,OAAO,CAAC,GAAG,SAAS,QAAQ,cAAc,CAAC,EAAE,UAAU;EAC5E;AAED,WAAS,SAAS,sBAAsB,MAAM,cAAc,WAAW,GAAG,YAAY,OAAO,CAAC,WAC5F,KACA,MAAM,IACP;AACD,SAAO,OAAO,WAAW,IAAI,GAAG,UAAU,IAAI,OAAO;CACtD;CAED,wBAAwBG,MAAcI,OAA2B,KAAKP,SAAS,WAAmB;AAChG,SAAO,QAAQ,EAAE,KAAK,GAAG,KAAK,IAAI;CACnC;AACF","names":["#options","options?: PathManagerOptions","extension: string | undefined","path: string","path: URL | string","fileExtension?: string","relativeTo: string | URL","root: string | undefined"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-utils/src/dependencies/PathManager.ts"],"sourcesContent":["import { basename, dirname, posix, relative, sep } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport type { SetRequired } from 'type-fest';\n\nexport type PathManagerOptions = Readonly<{\n  aliasRoot?: string;\n  extension?: string;\n  relativeTo?: URL | string;\n}>;\n\nexport default class PathManager {\n  readonly #options: SetRequired<PathManagerOptions, 'relativeTo'>;\n\n  constructor(options?: PathManagerOptions) {\n    let extension: string | undefined;\n\n    if (options?.extension) {\n      extension = options.extension.startsWith('.') ? options.extension : `.${options.extension}`;\n    }\n\n    this.#options = {\n      ...options,\n      extension,\n      relativeTo: options?.relativeTo ?? '.',\n    };\n  }\n\n  get aliasRoot(): string | undefined {\n    return this.#options.aliasRoot;\n  }\n\n  createBareModulePath(path: string, isFile = false): string {\n    const { extension } = this.#options;\n\n    if (extension && isFile) {\n      return `${path}.${extension}`;\n    }\n\n    return path;\n  }\n\n  createRelativePath(\n    path: URL | string,\n    fileExtension?: string,\n    relativeTo: string | URL = this.#options.relativeTo,\n  ): string {\n    const { extension } = this.#options;\n    const _path = path instanceof URL ? fileURLToPath(path) : path;\n    let result = _path;\n\n    if (extension && !_path.endsWith(extension)) {\n      result = `${dirname(result)}/${basename(result, fileExtension)}${extension}`;\n    }\n\n    result = relative(relativeTo instanceof URL ? fileURLToPath(relativeTo) : relativeTo, result).replaceAll(\n      sep,\n      posix.sep,\n    );\n    return result.startsWith('.') ? result : `./${result}`;\n  }\n\n  createTSAliasModulePath(path: string, root: string | undefined = this.#options.aliasRoot): string {\n    return root ? `${root}/${path}` : path;\n  }\n}\n"],"version":3}