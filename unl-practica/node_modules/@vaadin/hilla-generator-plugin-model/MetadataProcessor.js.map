{"version":3,"file":"MetadataProcessor.js","sourceRoot":"","sources":["src/MetadataProcessor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,EAAE,EAAyD,MAAM,YAAY,CAAC;AAYvF,SAAS,yBAAyB,CAAC,MAA0B;IAC3D,MAAM,WAAW,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;IAC5C,MAAM,cAAc,GAAG,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7D,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,kBAAkB,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CACxD,EAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC;QACvC,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KAC7F,CAAC,CACH,CAAC;IAEF,OAAO,EAAE,CAAC,OAAO,CAAC,wBAAwB,CACxC,aAAa,EACb,EAAE,CAAC,OAAO,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,CAC5D,CAAC;AACJ,CAAC;AAED,SAAS,sBAAsB,CAAC,MAA0B;IACxD,MAAM,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;IACvC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC,UAAU,EAAE,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;AACnG,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,MAAc;IACpC,MAAM,kBAAkB,GAAG,MAA4B,CAAC;IAExD,MAAM,UAAU,GAAG,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,EAAE,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,MAAM,CACnH,OAAO,CACgB,CAAC;IAE1B,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,EAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC,UAAU,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["import type { Schema } from '@vaadin/hilla-generator-core/Schema.js';\nimport ts, { type ObjectLiteralExpression, type PropertyAssignment } from 'typescript';\n\ninterface Annotation {\n  name: string;\n  attributes?: Record<string, unknown>;\n}\n\nexport type SchemaWithMetadata = Schema & {\n  'x-annotations'?: Annotation[];\n  'x-java-type'?: string;\n};\n\nfunction createAnnotationsProperty(schema: SchemaWithMetadata): PropertyAssignment | null {\n  const annotations = schema['x-annotations'];\n  const hasAnnotations = annotations && annotations.length > 0;\n  if (!hasAnnotations) {\n    return null;\n  }\n\n  const annotationLiterals = annotations.map((annotation) =>\n    ts.factory.createObjectLiteralExpression([\n      ts.factory.createPropertyAssignment('name', ts.factory.createStringLiteral(annotation.name)),\n    ]),\n  );\n\n  return ts.factory.createPropertyAssignment(\n    'annotations',\n    ts.factory.createArrayLiteralExpression(annotationLiterals),\n  );\n}\n\nfunction createJavaTypeProperty(schema: SchemaWithMetadata): PropertyAssignment | null {\n  const javaType = schema['x-java-type'];\n  if (!javaType) {\n    return null;\n  }\n\n  return ts.factory.createPropertyAssignment('javaType', ts.factory.createStringLiteral(javaType));\n}\n\nexport function process(schema: Schema): ObjectLiteralExpression | null {\n  const schemaWithMetadata = schema as SchemaWithMetadata;\n\n  const properties = [createAnnotationsProperty(schemaWithMetadata), createJavaTypeProperty(schemaWithMetadata)].filter(\n    Boolean,\n  ) as PropertyAssignment[];\n\n  if (properties.length === 0) {\n    return null;\n  }\n\n  return ts.factory.createObjectLiteralExpression(properties);\n}\n"]}