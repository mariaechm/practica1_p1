import { template, transform } from '@vaadin/hilla-generator-utils/ast.js';
import ts, {} from 'typescript';
export function hasValidationConstraints(schema) {
    return ('x-validation-constraints' in schema &&
        schema['x-validation-constraints'].length > 0);
}
function selector([statement]) {
    return statement.declarationList.declarations[0].initializer;
}
const variableStatementVar = 'const a';
export class ValidationConstraintProcessor {
    #importer;
    constructor(importer) {
        this.#importer = importer;
    }
    process(constraint) {
        return ts.factory.createNewExpression(this.#importer(constraint.simpleName), undefined, constraint.attributes ? [ValidationConstraintProcessor.#processAttributes(constraint.attributes)] : []);
    }
    static #processAttributes(attributes) {
        const names = Object.keys(attributes);
        const tpl = JSON.stringify(names.includes('value') && names.length === 1 ? attributes.value : attributes);
        return template(`${variableStatementVar}=${tpl}`, selector, [
            transform((node) => ts.isPropertyAssignment(node) && ts.isStringLiteral(node.name)
                ? ts.factory.createPropertyAssignment(node.name.text, node.initializer)
                : node),
        ]);
    }
}
//# sourceMappingURL=ValidationConstraintProcessor.js.map