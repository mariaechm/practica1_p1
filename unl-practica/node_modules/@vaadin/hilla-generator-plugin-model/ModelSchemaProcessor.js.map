{"version":3,"file":"ModelSchemaProcessor.js","sourceRoot":"","sources":["src/ModelSchemaProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type ArraySchema,\n  type BooleanSchema,\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  decomposeSchema,\n  type IntegerSchema,\n  isArraySchema,\n  isBooleanSchema,\n  isComposedSchema,\n  isIntegerSchema,\n  isMapSchema,\n  isNullableSchema,\n  isNumberSchema,\n  isReferenceSchema,\n  isStringSchema,\n  type MapSchema,\n  type NumberSchema,\n  type ReferenceSchema,\n  type Schema,\n  type StringSchema,\n} from '@vaadin/hilla-generator-core/Schema.js';\nimport type DependencyManager from '@vaadin/hilla-generator-utils/dependencies/DependencyManager.js';\nimport ts, {\n  type Expression,\n  type Identifier,\n  type PropertyAssignment,\n  type TypeNode,\n  type TypeReferenceNode,\n} from 'typescript';\nimport { process } from './MetadataProcessor.js';\nimport { createModelBuildingCallback, importBuiltInFormModel } from './utils.js';\nimport { hasValidationConstraints, ValidationConstraintProcessor } from './ValidationConstraintProcessor.js';\n\nconst $dependencies = Symbol();\nconst $processArray = Symbol();\nconst $processRecord = Symbol();\nconst $processReference = Symbol();\nconst $processString = Symbol();\nconst $processNumber = Symbol();\nconst $processBoolean = Symbol();\nconst $processUnknown = Symbol();\nconst $originalSchema = Symbol();\nconst $schema = Symbol();\n\nexport abstract class ModelSchemaPartProcessor<T> {\n  protected readonly [$dependencies]: DependencyManager;\n  protected readonly [$originalSchema]: Schema;\n  protected readonly [$schema]: Schema;\n\n  constructor(schema: Schema, dependencies: DependencyManager) {\n    this[$dependencies] = dependencies;\n    this[$originalSchema] = schema;\n    this[$schema] = isComposedSchema(schema) ? decomposeSchema(schema)[0] : schema;\n  }\n\n  process(): T {\n    const schema = this[$schema];\n\n    if (isReferenceSchema(schema)) {\n      return this[$processReference](schema);\n    }\n\n    if (isArraySchema(schema)) {\n      return this[$processArray](schema);\n    }\n\n    if (isMapSchema(schema)) {\n      return this[$processRecord](schema);\n    }\n\n    if (isStringSchema(schema)) {\n      return this[$processString](schema);\n    }\n\n    if (isNumberSchema(schema) || isIntegerSchema(schema)) {\n      return this[$processNumber](schema);\n    }\n\n    if (isBooleanSchema(schema)) {\n      return this[$processBoolean](schema);\n    }\n\n    return this[$processUnknown](schema);\n  }\n\n  protected abstract [$processArray](schema: ArraySchema): T;\n  protected abstract [$processBoolean](schema: BooleanSchema): T;\n  protected abstract [$processNumber](schema: IntegerSchema | NumberSchema): T;\n  protected abstract [$processRecord](schema: MapSchema): T;\n  protected abstract [$processReference](schema: ReferenceSchema): T;\n  protected abstract [$processString](schema: StringSchema): T;\n  protected abstract [$processUnknown](schema: Schema): T;\n}\n\nfunction handleNullableInternalType(schema: Schema, typeNode: TypeNode): TypeNode {\n  return isNullableSchema(schema)\n    ? ts.factory.createUnionTypeNode([typeNode, ts.factory.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword)])\n    : typeNode;\n}\n\nclass ModelSchemaInternalTypeProcessor extends ModelSchemaPartProcessor<TypeNode> {\n  protected override [$processArray](schema: ArraySchema): TypeNode {\n    return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('ReadonlyArray'), [\n      handleNullableInternalType(\n        schema.items,\n        new ModelSchemaInternalTypeProcessor(schema.items, this[$dependencies]).process(),\n      ),\n    ]);\n  }\n\n  protected override [$processBoolean](_: BooleanSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.BooleanKeyword);\n  }\n\n  protected override [$processNumber](_: IntegerSchema | NumberSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword);\n  }\n\n  protected override [$processRecord]({ additionalProperties: props }: MapSchema): TypeNode {\n    const valueType =\n      typeof props === 'boolean'\n        ? ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)\n        : handleNullableInternalType(props, new ModelSchemaInternalTypeProcessor(props, this[$dependencies]).process());\n\n    return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('Record'), [\n      ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),\n      valueType,\n    ]);\n  }\n\n  protected override [$processReference](schema: ReferenceSchema): TypeNode {\n    const { imports, paths } = this[$dependencies];\n    const typeName = convertReferenceSchemaToSpecifier(schema);\n    const typePath = paths.createRelativePath(convertReferenceSchemaToPath(schema));\n    return ts.factory.createTypeReferenceNode(\n      imports.default.getIdentifier(typePath) ?? imports.default.add(typePath, typeName, true),\n    );\n  }\n\n  protected override [$processString](_: StringSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword);\n  }\n\n  protected override [$processUnknown](_: Schema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword);\n  }\n}\n\nclass ModelSchemaIdentifierProcessor extends ModelSchemaPartProcessor<Identifier> {\n  override [$processArray](_: ArraySchema): Identifier {\n    return importBuiltInFormModel('ArrayModel', this[$dependencies]);\n  }\n\n  override [$processBoolean](_: BooleanSchema): Identifier {\n    return importBuiltInFormModel('BooleanModel', this[$dependencies]);\n  }\n\n  override [$processNumber](_: IntegerSchema | NumberSchema): Identifier {\n    return importBuiltInFormModel('NumberModel', this[$dependencies]);\n  }\n\n  override [$processRecord](_: MapSchema): Identifier {\n    return importBuiltInFormModel('ObjectModel', this[$dependencies]);\n  }\n\n  override [$processReference](schema: ReferenceSchema): Identifier {\n    const { imports, paths } = this[$dependencies];\n\n    const name = `${convertReferenceSchemaToSpecifier(schema)}Model`;\n    const path = paths.createRelativePath(`${convertReferenceSchemaToPath(schema)}Model`);\n\n    return imports.default.getIdentifier(path) ?? imports.default.add(path, name);\n  }\n\n  override [$processString](_: StringSchema): Identifier {\n    return importBuiltInFormModel('StringModel', this[$dependencies]);\n  }\n\n  override [$processUnknown](_: Schema): Identifier {\n    return importBuiltInFormModel('ObjectModel', this[$dependencies]);\n  }\n}\n\nexport class ModelSchemaTypeProcessor extends ModelSchemaPartProcessor<TypeReferenceNode> {\n  readonly #id: ModelSchemaIdentifierProcessor;\n\n  constructor(schema: Schema, dependencies: DependencyManager) {\n    super(schema, dependencies);\n    this.#id = new ModelSchemaIdentifierProcessor(schema, dependencies);\n  }\n\n  protected override [$processArray](schema: ArraySchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processArray](schema), [\n      new ModelSchemaTypeProcessor(schema.items, this[$dependencies]).process(),\n    ]);\n  }\n\n  protected override [$processBoolean](schema: BooleanSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processBoolean](schema));\n  }\n\n  protected override [$processNumber](schema: IntegerSchema | NumberSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processNumber](schema));\n  }\n\n  protected override [$processRecord](schema: MapSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processRecord](schema), [\n      new ModelSchemaInternalTypeProcessor(schema, this[$dependencies]).process(),\n    ]);\n  }\n\n  protected override [$processReference](schema: ReferenceSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processReference](schema));\n  }\n\n  protected override [$processString](schema: StringSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processString](schema));\n  }\n\n  protected override [$processUnknown](schema: Schema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processUnknown](schema));\n  }\n}\n\nexport class ModelSchemaExpressionProcessor extends ModelSchemaPartProcessor<readonly Expression[]> {\n  readonly #validationConstraintProcessor: ValidationConstraintProcessor;\n\n  constructor(schema: Schema, dependencies: DependencyManager) {\n    super(schema, dependencies);\n    this.#validationConstraintProcessor = new ValidationConstraintProcessor((name) =>\n      importBuiltInFormModel(name, dependencies),\n    );\n  }\n\n  override process(): readonly ts.Expression[] {\n    const originalSchema = this[$originalSchema];\n\n    let result = super.process();\n\n    const modelOptionsProperties = [\n      this.#createValidatorsProperty(originalSchema),\n      ModelSchemaExpressionProcessor.#createMetadataProperty(originalSchema),\n    ].filter(Boolean) as PropertyAssignment[];\n\n    if (modelOptionsProperties.length > 0) {\n      const optionsObject = ts.factory.createObjectLiteralExpression(modelOptionsProperties);\n\n      result = [...result, optionsObject];\n    }\n\n    return [isNullableSchema(originalSchema) ? ts.factory.createTrue() : ts.factory.createFalse(), ...result];\n  }\n\n  protected override [$processArray](schema: ArraySchema): readonly Expression[] {\n    const model = new ModelSchemaIdentifierProcessor(schema.items, this[$dependencies]).process();\n\n    return [\n      createModelBuildingCallback(\n        model,\n        new ModelSchemaExpressionProcessor(schema.items, this[$dependencies]).process(),\n      ),\n    ];\n  }\n\n  protected override [$processBoolean](_: BooleanSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processNumber](_: IntegerSchema | NumberSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processRecord](_: MapSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processReference](_: ReferenceSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processString](_: StringSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processUnknown](_: Schema): readonly Expression[] {\n    return [];\n  }\n\n  #createValidatorsProperty(schema: Schema): PropertyAssignment | null {\n    if (!hasValidationConstraints(schema)) {\n      return null;\n    }\n\n    const constraints = schema['x-validation-constraints'].map((constraint) =>\n      this.#validationConstraintProcessor.process(constraint),\n    );\n    return ts.factory.createPropertyAssignment('validators', ts.factory.createArrayLiteralExpression(constraints));\n  }\n\n  static #createMetadataProperty(schema: Schema): PropertyAssignment | null {\n    const metadata = process(schema);\n    return metadata ? ts.factory.createPropertyAssignment('meta', metadata) : null;\n  }\n}\n"]}