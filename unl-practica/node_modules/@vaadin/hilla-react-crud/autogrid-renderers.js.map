{"version":3,"file":"autogrid-renderers.js","sourceRoot":"","sources":["src/autogrid-renderers.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { GridItemModel } from '@vaadin/react-components/Grid.js';\nimport type { GridColumnElement } from '@vaadin/react-components/GridColumn.js';\nimport { Icon } from '@vaadin/react-components/Icon.js';\nimport { type ComponentType, createContext, type CSSProperties, type JSX, useContext } from 'react';\nimport { ColumnContext } from './autogrid-column-context';\nimport type { ItemCounts } from './data-provider';\nimport { useLocaleFormatter } from './locale.js';\nimport { convertToTitleCase } from './util';\n\n// eslint-disable-next-line import/no-unassigned-import\nimport '@vaadin/vaadin-lumo-styles/vaadin-iconset.js';\n\nexport type RendererOptions<TItem> = {\n  item: TItem;\n  model: GridItemModel<TItem>;\n  original: GridColumnElement<TItem>;\n};\n\nfunction getColumnValue<TItem>(context: ColumnContext, item: TItem): any {\n  const path = context.propertyInfo.name;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return path.split('.').reduce<any>((obj, property) => (obj ? obj[property] : undefined), item);\n}\n\nconst fontVariantStyle: CSSProperties = { fontVariantNumeric: 'tabular-nums' };\n\nexport function AutoGridIntegerRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatInteger(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridDecimalRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatDecimal(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridEnumRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item) ?? '';\n  return <span>{convertToTitleCase(value)}</span>;\n}\n\nexport function AutoGridBooleanRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  if (value) {\n    return <Icon aria-label=\"false\" icon=\"lumo:checkmark\" />;\n  }\n  return <Icon aria-label=\"true\" style={{ color: 'var(--lumo-secondary-text-color)' }} icon=\"lumo:minus\" />;\n}\n\nexport function AutoGridDateRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatDate(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatLocalTime(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridDateTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatLocalDateTime(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridJsonRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  const jsonString = value ? JSON.stringify(value) : '';\n  const jsonPreview = jsonString.length > 50 ? `${jsonString.substring(0, 50)}...` : jsonString;\n  return <span>{jsonPreview}</span>;\n}\n\nexport function AutoGridRowNumberRenderer<TItem>({ model }: RendererOptions<TItem>): JSX.Element {\n  return <>{model.index + 1}</>;\n}\n\nexport type FooterContextType = {\n  totalCount?: boolean;\n  filteredCount?: boolean;\n  footerCountRenderer?: ComponentType<ItemCounts>;\n  itemCounts?: ItemCounts;\n};\n\nexport const FooterContext = createContext<FooterContextType>(undefined!);\n\nexport function AutoGridFooterItemCountRenderer(): JSX.Element {\n  const footerContext = useContext(FooterContext);\n  const { totalCount, filteredCount, itemCounts, footerCountRenderer: FooterRenderer } = footerContext;\n\n  if (FooterRenderer) {\n    return <FooterRenderer {...itemCounts} />;\n  }\n\n  let filterCountText: string | undefined;\n  if (filteredCount && itemCounts?.filteredCount !== undefined) {\n    filterCountText =\n      totalCount && itemCounts.totalCount !== undefined\n        ? `Showing: ${itemCounts.filteredCount} out of ${itemCounts.totalCount}`\n        : `Showing: ${itemCounts.filteredCount}`;\n  } else if (totalCount && itemCounts?.totalCount !== undefined) {\n    filterCountText = `Total: ${itemCounts.totalCount}`;\n  }\n  if (filterCountText) {\n    return <p>{filterCountText}</p>;\n  }\n  return <></>;\n}\n"]}