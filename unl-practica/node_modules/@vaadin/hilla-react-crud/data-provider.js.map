{"version":3,"file":"data-provider.js","sourceRoot":"","sources":["src/data-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ComboBoxDataProvider,\n  ComboBoxDataProviderCallback,\n  ComboBoxDataProviderParams,\n} from '@vaadin/react-components';\nimport type { GridDataProvider, GridDataProviderCallback, GridDataProviderParams } from '@vaadin/react-components/Grid';\nimport { useMemo, useState, type DependencyList } from 'react';\nimport type { CountService, ListService } from './crud.js';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion.js';\nimport type Pageable from './types/com/vaadin/hilla/mappedtypes/Pageable.js';\nimport type Sort from './types/com/vaadin/hilla/mappedtypes/Sort.js';\nimport Direction from './types/org/springframework/data/domain/Sort/Direction.js';\nimport NullHandling from './types/org/springframework/data/domain/Sort/NullHandling.js';\n\ntype MaybeCountService<TItem> = Partial<CountService<TItem>>;\ntype ListAndMaybeCountService<TItem> = ListService<TItem> & MaybeCountService<TItem>;\ntype ListAndCountService<TItem> = CountService<TItem> & ListService<TItem>;\n\ntype PageRequest = {\n  pageNumber: number;\n  pageSize: number;\n  sort: Sort;\n};\n\ntype DataPage<TItem> = {\n  items: TItem[];\n  pageRequest: PageRequest;\n};\n\nexport type ItemCounts = {\n  totalCount?: number;\n  filteredCount?: number;\n};\n\ntype AfterLoadCallback = (result: ItemCounts) => void;\n\ntype DataProviderOptions = {\n  initialFilter?: FilterUnion;\n  loadTotalCount?: boolean;\n  afterLoad?: AfterLoadCallback;\n};\n\nfunction createSort<TItem>(params: GridDataProviderParams<TItem>): Sort {\n  return {\n    orders: params.sortOrders\n      .filter((order) => order.direction != null)\n      .map((order) => ({\n        property: order.path,\n        direction: order.direction === 'asc' ? Direction.ASC : Direction.DESC,\n        ignoreCase: false,\n        nullHandling: NullHandling.NATIVE,\n      })),\n  };\n}\n\nexport function isCountService<TItem>(service: ListAndMaybeCountService<TItem>): service is ListAndCountService<TItem> {\n  return !!service.count;\n}\n\nexport abstract class DataProvider<TItem> {\n  protected readonly service: ListAndMaybeCountService<TItem>;\n  protected readonly loadTotalCount?: boolean;\n  protected readonly afterLoadCallback?: AfterLoadCallback;\n\n  protected filter: FilterUnion | undefined;\n  protected totalCount: number | undefined;\n  protected filteredCount: number | undefined;\n\n  constructor(service: ListAndMaybeCountService<TItem>, options: DataProviderOptions = {}) {\n    this.service = service;\n    this.filter = options.initialFilter;\n    this.loadTotalCount = options.loadTotalCount;\n    this.afterLoadCallback = options.afterLoad;\n\n    this.load = this.load.bind(this);\n  }\n\n  reset(): void {\n    this.totalCount = undefined;\n    this.filteredCount = undefined;\n  }\n\n  setFilter(filter: FilterUnion | undefined): void {\n    this.reset();\n    this.filter = filter;\n  }\n\n  async load(params: GridDataProviderParams<TItem>, callback: GridDataProviderCallback<TItem>): Promise<void> {\n    // Fetch page and filtered count\n    const page = await this.fetchPage(params);\n    this.filteredCount = await this.fetchFilteredCount(page);\n    // Only fetch total count if it's specific in options\n    if (this.loadTotalCount) {\n      this.totalCount = await this.fetchTotalCount(page);\n    }\n\n    // Pass results to grid\n    callback(page.items, this.filteredCount);\n\n    // Pass results to callback\n    if (this.afterLoadCallback) {\n      this.afterLoadCallback({\n        totalCount: this.totalCount,\n        filteredCount: this.filteredCount,\n      });\n    }\n  }\n\n  protected async fetchPage(params: GridDataProviderParams<TItem>): Promise<DataPage<TItem>> {\n    const sort = createSort(params);\n    const pageNumber = params.page;\n    const { pageSize } = params;\n    const pageRequest = {\n      pageNumber,\n      pageSize,\n      sort,\n    };\n    const items = await this.service.list(pageRequest, this.filter);\n\n    return { items, pageRequest };\n  }\n\n  protected abstract fetchTotalCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n\n  protected abstract fetchFilteredCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n}\n\nexport abstract class AbstractComboBoxDataProvider<TItem> {\n  protected readonly list: ComboBoxFetchMethod<TItem>;\n  protected readonly loadTotalCount?: boolean;\n\n  protected sort: Sort | undefined;\n  protected totalCount: number | undefined;\n  protected filteredCount: number | undefined;\n\n  constructor(list: ComboBoxFetchMethod<TItem>, sort: Sort | undefined) {\n    this.list = list;\n    this.sort = sort;\n  }\n\n  reset(): void {\n    this.totalCount = undefined;\n    this.filteredCount = undefined;\n  }\n\n  load(params: ComboBoxDataProviderParams, callback: ComboBoxDataProviderCallback<TItem>): void {\n    this.fetchPage(params)\n      .then(async (page) => {\n        this.filteredCount = await this.fetchFilteredCount(page);\n        // Only fetch total count if it's specific in options\n        if (this.loadTotalCount) {\n          this.totalCount = await this.fetchTotalCount(page);\n        }\n\n        // Pass results to the combobox\n        callback(page.items, this.filteredCount);\n      })\n      .catch((error: unknown) => {\n        throw error;\n      });\n  }\n\n  protected async fetchPage(params: ComboBoxDataProviderParams): Promise<DataPage<TItem>> {\n    const pageNumber = params.page;\n    const { pageSize } = params;\n    const pageRequest: Pageable = {\n      pageNumber,\n      pageSize,\n      sort: this.sort ?? { orders: [] },\n    };\n    const items = await this.list(pageRequest, params.filter);\n\n    return { items, pageRequest };\n  }\n\n  protected abstract fetchTotalCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n\n  protected abstract fetchFilteredCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n}\n\nfunction determineInfiniteScrollingSize(page: DataPage<unknown>, lastKnownSize?: number): number {\n  const { items, pageRequest } = page;\n  const { pageNumber, pageSize } = pageRequest;\n  let infiniteScrollingSize;\n\n  if (items.length === pageSize) {\n    infiniteScrollingSize = (pageNumber + 1) * pageSize + 1;\n    if (lastKnownSize !== undefined && infiniteScrollingSize < lastKnownSize) {\n      // Only allow size to grow here to avoid shrinking the size when scrolled down and sorting\n      infiniteScrollingSize = lastKnownSize;\n    }\n  } else {\n    infiniteScrollingSize = pageNumber * pageSize + items.length;\n  }\n\n  return infiniteScrollingSize;\n}\n\nexport class InfiniteDataProvider<TItem> extends DataProvider<TItem> {\n  // cannot be static, otherwise it does not implement superclass\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  protected fetchTotalCount(): undefined {\n    return undefined;\n  }\n\n  protected fetchFilteredCount(page: DataPage<TItem>): number | undefined {\n    return determineInfiniteScrollingSize(page, this.filteredCount);\n  }\n}\nexport class InfiniteComboBoxDataProvider<TItem> extends AbstractComboBoxDataProvider<TItem> {\n  // cannot be static, otherwise it does not implement superclass\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  protected fetchTotalCount(): undefined {\n    return undefined;\n  }\n\n  protected fetchFilteredCount(page: DataPage<TItem>): number | undefined {\n    return determineInfiniteScrollingSize(page, this.filteredCount);\n  }\n}\n\nexport class FixedSizeDataProvider<TItem> extends DataProvider<TItem> {\n  declare service: ListAndCountService<TItem>;\n\n  constructor(service: ListAndMaybeCountService<TItem>, options: DataProviderOptions = {}) {\n    if (!isCountService(service)) {\n      throw new Error('The provided service does not implement the CountService interface.');\n    }\n    super(service, options);\n  }\n\n  protected async fetchTotalCount(): Promise<number | undefined> {\n    // Use cached count if it's already known\n    if (this.totalCount !== undefined) {\n      return this.totalCount;\n    }\n    return this.service.count(undefined);\n  }\n\n  protected async fetchFilteredCount(): Promise<number | undefined> {\n    // Use cached count if it's already known\n    if (this.filteredCount !== undefined) {\n      return this.filteredCount;\n    }\n    return this.service.count(this.filter);\n  }\n}\n\nexport function createDataProvider<TItem>(\n  service: ListAndMaybeCountService<TItem>,\n  options: DataProviderOptions = {},\n): DataProvider<TItem> {\n  if (isCountService(service)) {\n    return new FixedSizeDataProvider(service, options);\n  }\n  return new InfiniteDataProvider(service, options);\n}\n\ntype UseDataProviderResult<TItem> = Readonly<{\n  dataProvider: GridDataProvider<TItem>;\n  refresh(): void;\n}>;\n\nexport function useDataProvider<TItem>(\n  service: ListAndMaybeCountService<TItem>,\n  filter?: FilterUnion,\n): UseDataProviderResult<TItem> {\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const dataProvider = useMemo(() => createDataProvider(service, { initialFilter: filter }), [service]);\n\n  // Update filter in data provider\n  dataProvider.setFilter(filter);\n\n  // Create a new data provider function reference when the filter changes or the refresh counter is incremented.\n  // This effectively forces the grid to reload\n  const dataProviderFn = useMemo(() => dataProvider.load.bind(dataProvider), [dataProvider, filter, refreshCounter]);\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    dataProvider: dataProviderFn,\n    refresh: () => {\n      dataProvider.reset();\n      setRefreshCounter(refreshCounter + 1);\n    },\n  };\n}\n\nexport type UseGridDataProviderResult<TItem> = GridDataProvider<TItem> & {\n  refresh(): void;\n};\n\nexport type GridFetchMethod<TItem> = (pageable: Pageable) => Promise<TItem[]>;\n\n/**\n * Creates a data provider for a grid component that fetches data using the provided fetch callback.\n *\n * @param fetch - the callback that fetches the data for the grid. The callback should return a promise that resolves to an array of items.\n * @param dependencies - A list of all reactive values referenced inside of the fetch callback. A change to any of the listed values will cause the grid to refresh its data.\n * @returns a data provider that can be assigned to a <Grid> component usings its dataProvider property and additionally contains a refresh method that can be called to force a reload of the grid data.\n */\nexport function useGridDataProvider<TItem>(\n  fetch: GridFetchMethod<TItem>,\n  dependencies?: DependencyList,\n): UseGridDataProviderResult<TItem> {\n  const result = useDataProvider(\n    useMemo(\n      () => ({\n        list: async (pageable: Pageable) => fetch(pageable),\n      }),\n      dependencies ?? [],\n    ),\n  );\n  const dataProvider: UseGridDataProviderResult<TItem> = result.dataProvider as UseGridDataProviderResult<TItem>;\n  dataProvider.refresh = result.refresh;\n  return dataProvider;\n}\n\nexport type UseComboBoxDataProviderResult<TItem> = ComboBoxDataProvider<TItem> & {\n  refresh(): void;\n};\n\nexport type ComboBoxFetchMethod<TItem> = (pageable: Pageable, filterString: string) => Promise<TItem[]>;\n\nfunction createComboBoxDataProvider<TItem>(\n  list: ComboBoxFetchMethod<TItem>,\n  sort: Sort | undefined,\n): AbstractComboBoxDataProvider<TItem> {\n  return new InfiniteComboBoxDataProvider(list, sort);\n}\n\ntype ComboboxDataProviderOptions = {\n  sort?: Sort;\n};\n\n/**\n * Creates a data provider for a combo box component that fetches data using the provided fetch callback.\n *\n * @param fetch - the method that fetches the data for the grid. The method should return a promise that resolves to an array of items.\n * @param dependencies - A list of all reactive values referenced inside of the fetch callback. A change to any of the listed values will cause the combo box to refresh its data.\n * @returns a data provider that can be assigned to a <ComboBox> component usings its dataProvider property and additionally contains a refresh method that can be called to force a reload of the combo box data.\n */\nexport function useComboBoxDataProvider<TItem>(\n  fetch: ComboBoxFetchMethod<TItem>,\n  options?: ComboboxDataProviderOptions,\n  dependencies?: DependencyList,\n): UseComboBoxDataProviderResult<TItem> {\n  const [refreshCounter, setRefreshCounter] = useState(0);\n\n  const dataProvider = useMemo(\n    () => createComboBoxDataProvider(fetch, options?.sort),\n    [options?.sort, ...(dependencies ?? [])],\n  );\n\n  // Create a new data provider function reference when the refresh counter is incremented.\n  // This effectively forces the combo box to reload\n  return useMemo(() => {\n    const dataProviderWithRefresh = (...args: Parameters<typeof dataProvider.load>) => dataProvider.load(...args);\n    dataProviderWithRefresh.refresh = () => {\n      dataProvider.reset();\n      setRefreshCounter(refreshCounter + 1);\n    };\n    return dataProviderWithRefresh;\n  }, [dataProvider, refreshCounter]);\n}\n"]}