{"version":3,"file":"autocrud.js","sourceRoot":"","sources":["src/autocrud.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { AbstractModel, DetachedModelConstructor, Value } from '@vaadin/hilla-lit-form';\nimport { Button } from '@vaadin/react-components/Button.js';\nimport { SplitLayout } from '@vaadin/react-components/SplitLayout.js';\nimport { type JSX, useId, useRef, useState } from 'react';\nimport { AutoCrudDialog } from './autocrud-dialog.js';\nimport css from './autocrud.obj.js';\nimport { type AutoFormProps, emptyItem, AutoForm } from './autoform.js';\nimport { type AutoGridProps, AutoGrid, type AutoGridRef } from './autogrid.js';\nimport type { CrudService } from './crud.js';\nimport { useMediaQuery } from './media-query.js';\nimport { type ComponentStyleProps, registerStylesheet } from './util.js';\n\nregisterStylesheet(css);\n\nexport type AutoCrudFormHeaderRenderer<TItem> = (\n  editedItem: TItem | null,\n  disabled: boolean,\n) => JSX.Element | null | undefined;\n\nexport type AutoCrudFormProps<TModel extends AbstractModel> = Omit<\n  Partial<AutoFormProps<TModel>>,\n  'disabled' | 'item' | 'model' | 'onDeleteSuccess' | 'onSubmitSuccess' | 'service'\n> &\n  Readonly<{\n    /**\n     * A custom renderer function to create the header for the form. The\n     * function receives the edited item as the first parameter, and a boolean\n     * indicating whether the form is disabled as the second parameter. The\n     * edited item is `null` when creating a new item.\n     *\n     * By default, the header shows \"New item\" when creating a new item, and\n     * \"Edit item\" when editing an existing item.\n     */\n    headerRenderer?: AutoCrudFormHeaderRenderer<Value<TModel>>;\n  }>;\n\nexport type AutoCrudGridProps<TItem> = Omit<\n  Partial<AutoGridProps<TItem>>,\n  'model' | 'onActiveItemChanged' | 'selectedItems' | 'service'\n>;\n\nexport type AutoCrudProps<TModel extends AbstractModel = AbstractModel> = ComponentStyleProps &\n  Readonly<{\n    /**\n     * The service to use for fetching the data, as well saving and deleting\n     * items. This must be a TypeScript service that has been generated by Hilla\n     * from a backend Java service that implements the\n     * `com.vaadin.hilla.crud.CrudService` interface.\n     */\n    service: CrudService<Value<TModel>>;\n    /**\n     * The entity model to use for the CRUD. This determines which columns to\n     * show in the grid, and which fields to show in the form. This must be a\n     * Typescript model class that has been generated by Hilla from a backend\n     * Java class. The model must match with the type of the items returned by\n     * the service. For example, a `PersonModel` can be used with a service that\n     * returns `Person` instances.\n     *\n     * By default, the grid shows columns for all properties of the model which\n     * have a type that is supported. Use the `gridProps.visibleColumns` option\n     * to customize which columns to show and in which order.\n     *\n     * By default, the form shows fields for all properties of the model which\n     * have a type that is supported. Use the `formProps.visibleFields`\n     * option to customize which fields to show and in which order.\n     */\n    model: DetachedModelConstructor<TModel>;\n    /**\n     * The property to use to detect an item's ID. The item ID is required for\n     * deleting items via the `CrudService.delete` method as well as keeping the\n     * selection state after reloading the grid.\n     *\n     * By default, the component uses the property annotated with\n     * `jakarta.persistence.Id`, or a property named `id`, in that order.\n     * This option can be used to override the default behavior, or define the ID\n     * property in case a class doesn't have a property matching the defaults.\n     */\n    itemIdProperty?: string;\n    /**\n     * Determines whether to hide the \"New\" button in the toolbar.\n     *\n     * NOTE: This setting only hides the button; it does not prevent new items\n     * from being sent to the service. Ensure your backend Java service is\n     * properly secured to prevent unauthorized creation of new items.\n     *\n     * @defaultValue `false` meaning the button will be shown.\n     */\n    noNewButton?: boolean;\n    /**\n     * Props to pass to the form. See the `AutoForm` component for details.\n     */\n    formProps?: AutoCrudFormProps<TModel>;\n    /**\n     * Props to pass to the grid. See the `AutoGrid` component for details.\n     */\n    gridProps?: AutoCrudGridProps<Value<TModel>>;\n  }>;\n\nfunction defaultFormHeaderRenderer<TItem>(editedItem: TItem | null, disabled: boolean): JSX.Element | null | undefined {\n  const style = { color: disabled ? 'var(--lumo-disabled-text-color)' : 'var(--lumo-text-color)' };\n  return editedItem ? <h3 style={style}>Edit item</h3> : <h3 style={style}>New item</h3>;\n}\n\n/**\n * Auto CRUD is a component that provides CRUD (create, read, update, delete)\n * functionality based on a Java backend service. It automatically generates a\n * grid that shows data from the service, and a form for creating, updating and\n * deleting items.\n *\n * Example usage:\n * ```tsx\n * import { AutoCrud } from '@hilla/react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoCrud service={PersonService} model={PersonModel} />\n * ```\n */\nexport function AutoCrud<TModel extends AbstractModel>({\n  service,\n  model,\n  itemIdProperty,\n  noNewButton,\n  formProps,\n  gridProps,\n  style,\n  id,\n  className,\n}: AutoCrudProps<TModel>): JSX.Element {\n  const [item, setItem] = useState<Value<TModel> | typeof emptyItem | undefined>(undefined);\n  const fullScreen = useMediaQuery('(max-width: 600px), (max-height: 600px)');\n  const autoGridRef = useRef<AutoGridRef>(null);\n  const { headerRenderer: customFormHeaderRenderer, ...autoFormProps } = formProps ?? {};\n  const formHeaderRenderer: AutoCrudFormHeaderRenderer<Value<TModel>> =\n    customFormHeaderRenderer ?? defaultFormHeaderRenderer;\n\n  const autoCrudId = useId();\n\n  function refreshGrid() {\n    autoGridRef.current?.refresh();\n  }\n\n  function handleCancel() {\n    setItem(undefined);\n  }\n\n  const formHeader = item && item !== emptyItem ? formHeaderRenderer(item, !item) : formHeaderRenderer(null, !item);\n\n  const mainSection = (\n    <div className=\"auto-crud-main\">\n      <AutoGrid\n        {...gridProps}\n        service={service}\n        model={model as DetachedModelConstructor<AbstractModel<Value<TModel>>>}\n        itemIdProperty={itemIdProperty}\n        selectedItems={item && item !== emptyItem ? [item] : []}\n        onActiveItemChanged={(e) => {\n          const activeItem = e.detail.value;\n          setItem(activeItem ?? undefined);\n        }}\n        ref={autoGridRef}\n        aria-controls={autoFormProps.id ?? `auto-form-${id ?? autoCrudId}`}\n      ></AutoGrid>\n      {/* As the toolbar only contains the \"New\" button at the moment, and as an empty toolbar\n          renders as a half-height bar, let's hide it completely when the button is hidden */}\n      {!noNewButton && (\n        <div className=\"auto-crud-toolbar\">\n          <Button theme=\"primary\" onClick={() => setItem(emptyItem)}>\n            + New\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n\n  const autoForm = (\n    <AutoForm\n      id={autoFormProps.id ?? `auto-form-${id ?? autoCrudId}`}\n      deleteButtonVisible={true}\n      {...autoFormProps}\n      disabled={!item}\n      service={service}\n      model={model}\n      itemIdProperty={itemIdProperty}\n      item={item}\n      onSubmitSuccess={({ item: submittedItem }) => {\n        if (fullScreen) {\n          setItem(undefined);\n        } else {\n          setItem(submittedItem);\n        }\n        refreshGrid();\n      }}\n      onDeleteSuccess={() => {\n        setItem(undefined);\n        refreshGrid();\n      }}\n    />\n  );\n\n  // If the \"New\" button is visible, the form is always shown.\n  // Otherwise, the form is only shown when an item is being edited.\n  return (\n    <div className={`auto-crud ${className ?? ''}`} id={id} style={style}>\n      {noNewButton && (!item || item === emptyItem) ? (\n        mainSection\n      ) : fullScreen ? (\n        <>\n          {mainSection}\n          <AutoCrudDialog opened={!!item} header={formHeader} onClose={handleCancel}>\n            {autoForm}\n          </AutoCrudDialog>\n        </>\n      ) : (\n        <SplitLayout theme=\"small\">\n          {mainSection}\n          <div className=\"auto-crud-form\">\n            <div className=\"auto-crud-form-header\">{formHeader}</div>\n            {autoForm}\n          </div>\n        </SplitLayout>\n      )}\n    </div>\n  );\n}\n"]}