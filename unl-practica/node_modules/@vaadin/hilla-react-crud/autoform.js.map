{"version":3,"file":"autoform.js","sourceRoot":"","sources":["src/autoform.tsx"],"names":[],"mappings":"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","sourcesContent":["import { EndpointError } from '@vaadin/hilla-frontend';\nimport { type AbstractModel, type DetachedModelConstructor, ValidationError, type Value } from '@vaadin/hilla-lit-form';\nimport { useForm, type UseFormResult } from '@vaadin/hilla-react-form';\nimport { Button } from '@vaadin/react-components/Button.js';\nimport { ConfirmDialog } from '@vaadin/react-components/ConfirmDialog';\nimport { FormLayout } from '@vaadin/react-components/FormLayout';\nimport { VerticalLayout } from '@vaadin/react-components/VerticalLayout.js';\nimport {\n  type ComponentType,\n  type JSX,\n  type KeyboardEvent,\n  type ReactElement,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { AutoFormField, type AutoFormFieldProps, type FieldOptions } from './autoform-field.js';\nimport css from './autoform.obj.js';\nimport type { FormService } from './crud.js';\nimport { getDefaultProperties, ModelInfo, type PropertyInfo } from './model-info.js';\nimport { type ComponentStyleProps, registerStylesheet } from './util.js';\n\nregisterStylesheet(css);\n\nexport const emptyItem = Symbol();\n\n/**\n * An event that is fired when an error occurs while submitting the form.\n */\nexport type SubmitErrorEvent = {\n  /**\n   * The error that occurred.\n   */\n  error: EndpointError;\n  /**\n   * A function that can be used to set a custom error message. This will be\n   * shown in the form at the same position as the default error message.\n   * You are not required to call this function if you want to handle the\n   * error differently.\n   */\n  setMessage(message: string): void;\n};\n\n/**\n * An event that is fired when the form has been successfully submitted.\n */\nexport type SubmitEvent<TItem> = {\n  /**\n   * The item that was submitted, as returned by the service.\n   */\n  item: TItem;\n};\n\n/**\n * An event that is fired when an error occurs while deleting an item.\n */\nexport type DeleteErrorEvent = {\n  /**\n   * The error that occurred.\n   */\n  error: EndpointError;\n  /**\n   * A function that can be used to set a custom error message. This will be\n   * shown in the form at the same position as the default error message.\n   * You are not required to call this function if you want to handle the\n   * error differently.\n   */\n  setMessage(message: string): void;\n};\n\n/**\n * An event that is fired when the form has been successfully deleted.\n */\nexport type DeleteEvent<TItem> = {\n  /**\n   * The item that was deleted, as returned by the service.\n   */\n  item: TItem;\n};\n\nexport type AutoFormLayoutRendererProps<M extends AbstractModel> = Readonly<{\n  form: UseFormResult<M>;\n  children: ReadonlyArray<ReactElement<AutoFormFieldProps>>;\n}>;\n\nexport type AutoFormProps<M extends AbstractModel = AbstractModel> = ComponentStyleProps &\n  Readonly<{\n    /**\n     * The service to use for saving and deleting items. This must be a\n     * TypeScript service that has been generated by Hilla from a backend Java\n     * service that implements the `com.vaadin.hilla.crud.FormService` interface.\n     */\n    service: FormService<Value<M>>;\n    /**\n     * The entity model to use, which determines which fields to show in the\n     * form. This must be a Typescript model class that has been generated by\n     * Hilla from a backend Java class. The model must match with the type of\n     * the items handled by the service. For example, a `PersonModel` can be\n     * used with a service that handles `Person` instances.\n     *\n     * By default, the form shows fields for all properties of the model which\n     * have a type that is supported. Use the `visibleFields` option to customize\n     * which fields to show and in which order.\n     */\n    model: DetachedModelConstructor<M>;\n    /**\n     * The property to use to detect an item's ID. The item ID is required for\n     * deleting items via the `FormService.delete` method. The delete button\n     * will not be shown if no item ID can be found.\n     *\n     * By default, the component uses the property annotated with\n     * `jakarta.persistence.Id`, or a property named `id`, in that order.\n     * This option can be used to override the default behavior, or define the ID\n     * property in case a class doesn't have a property matching the defaults.\n     */\n    itemIdProperty?: string;\n    /**\n     * The item to edit in the form. The form fields are automatically populated\n     * with values from the item's properties. In order to create a new item,\n     * either pass `null`, or leave this prop as undefined.\n     *\n     * Use the `onSubmitSuccess` callback to get notified when the item has been\n     * saved.\n     *\n     * When submitting a new item (i.e. when `item` is null or undefined), the\n     * form will be automatically cleared, allowing to submit another new item.\n     * In order to keep editing the same item after submitting, set the `item`\n     * prop to the new item.\n     */\n    item?: Value<M> | typeof emptyItem | null;\n    /**\n     * Whether the form should be disabled. This disables all form fields and\n     * all buttons.\n     */\n    disabled?: boolean;\n    /**\n     * Allows to customize the layout of the form by providing a custom\n     * renderer. The renderer receives the form instance and the pre-rendered\n     * fields as props. The renderer can either reuse the pre-rendered fields in\n     * the custom layout, or render custom fields and connect them to the form\n     * manually.\n     *\n     * Check the component documentation for details and examples.\n     *\n     * Example using pre-rendered fields:\n     * ```tsx\n     * <AutoForm layoutRenderer={({ children }) =>\n     *   <VerticalLayout>\n     *     {children}\n     *     <p>All data is collected anonymously.</p>\n     *   </VerticalLayout>\n     * } />\n     * ```\n     *\n     * Example rendering custom fields:\n     * ```tsx\n     * <AutoForm layoutRenderer={({ form }) =>\n     *   <VerticalLayout>\n     *     <TextField {...form.field(form.model.name)} />\n     *     ...\n     *   </VerticalLayout>\n     * } />\n     * ```\n     */\n    layoutRenderer?: ComponentType<AutoFormLayoutRendererProps<M>>;\n    /**\n     * Defines the fields to show in the form, and in which order. This takes\n     * an array of property names. Properties that are not included in this\n     * array will not be shown in the form, and properties that are included,\n     * but don't exist in the model, will be ignored.\n     */\n    visibleFields?: string[];\n    /**\n     * Defines the fields to hide in the form, keeping the default order. This takes\n     * an array of property names. Properties that are not included in this\n     * array will not be hidden in the form, and properties that are included,\n     * but don't exist in the model, will be ignored.\n     */\n    hiddenFields?: string[];\n    /**\n     * Allows to customize the FormLayout used by default. This is especially useful\n     * to define the `responsiveSteps`. See the\n     * {@link https://hilla.dev/docs/react/components/form-layout | FormLayout documentation}\n     * for details.\n     */\n    formLayoutProps?: ComponentStyleProps & Pick<Parameters<typeof FormLayout>[0], 'responsiveSteps'>;\n    /**\n     * Allows to customize individual fields of the form. This takes an object\n     * where the keys are property names, and the values are options for the\n     * respective field for editing that property.\n     */\n    fieldOptions?: Record<string, FieldOptions>;\n    /**\n     * Whether to show the delete button in the form. This is disabled by\n     * default. If enabled, the delete button will only be shown when editing\n     * an existing item, which means that `item` is not null. The delete button\n     * will also only be shown if an item has a discernible ID. See the\n     * `itemIdProperty` prop for details how the item ID is detected.\n     *\n     * Use the `onDeleteSuccess` callback to get notified when the item has been\n     * deleted.\n     *\n     * NOTE: This only hides the button, it does not prevent from calling the\n     * delete method on the service. To completely disable deleting, you must\n     * override the `delete` method in the backend Java service to either throw\n     * an exception or annotate it with `@DenyAll` to prevent access.\n     */\n    deleteButtonVisible?: boolean;\n    /**\n     * A callback that will be called if an unexpected error occurs while\n     * submitting the form.\n     *\n     * Note that this will not be called for validation errors, which are\n     * handled automatically.\n     */\n    onSubmitError?({ error }: SubmitErrorEvent): void;\n    /**\n     * A callback that will be called after the form has been successfully\n     * submitted and the item has been saved.\n     *\n     * When submitting a new item (i.e. when `item` is null or undefined), the\n     * form will be automatically cleared, allowing to submit another new item.\n     * In order to keep editing the same item after submitting, set the `item`\n     * prop to the new item.\n     */\n    onSubmitSuccess?({ item }: SubmitEvent<Value<M>>): void;\n    /**\n     * A callback that will be called if an unexpected error occurs while\n     * deleting an item.\n     */\n    onDeleteError?({ error }: DeleteErrorEvent): void;\n    /**\n     * A callback that will be called after the form has been successfully\n     * deleted.\n     */\n    onDeleteSuccess?({ item }: DeleteEvent<Value<M>>): void;\n  }>;\n\n/**\n * Auto Form is a component that automatically generates a form for editing,\n * updating and deleting items from a backend service.\n *\n * Example usage:\n * ```tsx\n * import { AutoForm } from '@vaadin/hilla-react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoForm\n *   service={PersonService}\n *   model={PersonModel}\n *   onSubmitSuccess={({ item }) => {\n *     console.log('Submitted item:', item);\n *   }}\n * />\n * ```\n */\nexport function AutoForm<M extends AbstractModel>({\n  service,\n  model,\n  itemIdProperty,\n  item = emptyItem,\n  onSubmitError,\n  onSubmitSuccess,\n  disabled,\n  layoutRenderer: LayoutRenderer,\n  visibleFields,\n  hiddenFields,\n  formLayoutProps,\n  fieldOptions,\n  style,\n  id,\n  className,\n  deleteButtonVisible,\n  onDeleteSuccess,\n  onDeleteError,\n}: AutoFormProps<M>): JSX.Element {\n  const form = useForm(model, {\n    onSubmit: async (formItem) => service.save(formItem),\n  });\n  const formErrorRef = useRef<HTMLDivElement>(null);\n  const [formError, setFormError] = useState<JSX.Element | string>('');\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const modelInfo = useMemo(() => new ModelInfo(model, itemIdProperty), [model]);\n\n  const isEditMode = item !== undefined && item !== null && item !== emptyItem;\n  const showDeleteButton = deleteButtonVisible && isEditMode && modelInfo.idProperty;\n  const isSubmitDisabled = !!disabled || (isEditMode && !form.dirty);\n\n  useEffect(() => {\n    if (item !== emptyItem) {\n      form.read(item);\n    } else {\n      form.clear();\n    }\n  }, [item]);\n\n  useEffect(() => {\n    formErrorRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });\n  }, [formError]);\n\n  function handleSubmitError(error: unknown) {\n    if (error instanceof ValidationError) {\n      const nonPropertyErrorMessages = error.errors\n        .filter((validationError) => !validationError.property || typeof validationError.property === 'string')\n        .map((validationError) => {\n          const property =\n            validationError.property && typeof validationError.property === 'string'\n              ? `${validationError.property}: `\n              : '';\n          return `${property}${validationError.validatorMessage ?? validationError.message}`;\n        });\n      if (nonPropertyErrorMessages.length > 0) {\n        setFormError(\n          <div ref={formErrorRef}>\n            Validation errors:\n            <ul>\n              {nonPropertyErrorMessages.map((message, index) => (\n                <li key={index}>{message}</li>\n              ))}\n            </ul>\n          </div>,\n        );\n      }\n    } else if (error instanceof EndpointError) {\n      if (onSubmitError) {\n        onSubmitError({ error, setMessage: setFormError });\n      } else {\n        setFormError(error.message);\n      }\n    } else {\n      throw error;\n    }\n  }\n\n  async function handleSubmit(): Promise<void> {\n    try {\n      setFormError('');\n      const newItem = await form.submit();\n      if (newItem === undefined) {\n        // If update returns an empty object, then no update was performed\n        throw new EndpointError('No update performed');\n      } else if (onSubmitSuccess) {\n        onSubmitSuccess({ item: newItem });\n      }\n      // Automatically clear the form after submitting a new item.\n      // Otherwise, there would be no way for the developer to clear it, as the\n      // there is no new value to set for the item prop to trigger the above\n      // effect in case the prop is already null, undefined or the empty item.\n      if (!item || item === emptyItem) {\n        form.clear();\n      }\n    } catch (error) {\n      handleSubmitError(error);\n    }\n  }\n\n  function deleteItem() {\n    setShowDeleteDialog(true);\n  }\n\n  async function confirmDelete() {\n    // At this point, item can not be null or emptyItem\n    const deletedItem = item as Value<M>;\n    try {\n      const idProperty = modelInfo.idProperty!;\n      // eslint-disable-next-line\n      const id = (item as any)[idProperty.name];\n      await service.delete(id);\n      if (onDeleteSuccess) {\n        onDeleteSuccess({ item: deletedItem });\n      }\n    } catch (error) {\n      if (error instanceof EndpointError) {\n        if (onDeleteError) {\n          onDeleteError({ error, setMessage: setFormError });\n        } else {\n          setFormError(error.message);\n        }\n      } else {\n        throw error;\n      }\n    } finally {\n      setShowDeleteDialog(false);\n    }\n  }\n\n  function cancelDelete() {\n    setShowDeleteDialog(false);\n  }\n\n  const handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.target instanceof HTMLTextAreaElement) {\n      return;\n    }\n    if (event.key === 'Enter' && !isSubmitDisabled) {\n      // eslint-disable-next-line no-void\n      void handleSubmit();\n    }\n  };\n\n  function createAutoFormField(propertyInfo: PropertyInfo): JSX.Element {\n    const fieldOptionsForProperty = fieldOptions?.[propertyInfo.name] ?? {};\n\n    return (\n      <AutoFormField\n        key={propertyInfo.name}\n        propertyInfo={propertyInfo}\n        form={form}\n        disabled={disabled}\n        options={fieldOptionsForProperty}\n      />\n    );\n  }\n\n  let visibleProperties = visibleFields ? modelInfo.getProperties(visibleFields) : getDefaultProperties(modelInfo);\n\n  // When using `hiddenFields`, remove fields to hide using their `name`\n  if (hiddenFields) {\n    visibleProperties = visibleProperties.filter(({ name }) => !hiddenFields.includes(name));\n  }\n\n  const fields = visibleProperties.map(createAutoFormField);\n\n  const layout = LayoutRenderer ? (\n    <LayoutRenderer form={form}>{fields}</LayoutRenderer>\n  ) : (\n    <FormLayout {...formLayoutProps}>{fields}</FormLayout>\n  );\n\n  return (\n    <div className={`auto-form ${className ?? ''}`} id={id} style={style} data-testid=\"auto-form\">\n      <VerticalLayout className=\"auto-form-fields\" onKeyDown={handleKeyDown}>\n        {layout}\n        {formError ? <div style={{ color: 'var(--lumo-error-color)' }}>{formError}</div> : <></>}\n      </VerticalLayout>\n      <div className=\"auto-form-toolbar\">\n        <Button\n          theme=\"primary\"\n          disabled={isSubmitDisabled}\n          // eslint-disable-next-line @typescript-eslint/no-misused-promises\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n        {form.dirty ? (\n          <Button theme=\"tertiary\" onClick={() => form.reset()}>\n            Discard\n          </Button>\n        ) : null}\n        {showDeleteButton && (\n          <Button className=\"auto-form-delete-button\" theme=\"tertiary error\" onClick={deleteItem}>\n            Delete...\n          </Button>\n        )}\n      </div>\n      {showDeleteDialog && (\n        <ConfirmDialog\n          opened\n          header=\"Delete item\"\n          confirmTheme=\"error\"\n          cancelButtonVisible\n          // eslint-disable-next-line\n          onConfirm={confirmDelete}\n          onCancel={cancelDelete}\n        >\n          Are you sure you want to delete the selected item?\n        </ConfirmDialog>\n      )}\n    </div>\n  );\n}\n"]}