{"mappings":"AAAA,OAAO,gDAAiD;AAGxD,OAAO,oBAAqB;AAE5B,OAAO,uCAAwC;AAC/C,OAAO,+CAAgD;AAQvD,eAAe,MAAM,UAAU;CAC7B,AAASA;CACT,AAASC;CACT,AAASC;CACT,AAASC;CAET,YAAYC,SAAuCC,SAA2B;AAC5E,OAAKH,UAAU,IAAI;AACnB,OAAKD,WAAW,IAAI,cAAc,SAAS,IAAI,kBAAkB,KAAKC,UAAU,QAAQ;AACxF,OAAKF,UAAU,QAAQ;AACvB,OAAKG,aAAa,QAAQ;CAC3B;CAED,MAAM,QAAQG,OAAyC;AACrD,OAAKN,QAAQ,OAAO,MAAM,qBAAqB;EAC/C,MAAM,MAAO,MAAM,KAAKE,QAAQ,OAAO,KAAK,MAAM,MAAM,CAAC;EAEzD,MAAMK,UAAyB;GAC7B;GACA,SAAS,KAAKL,QAAQ;GACtB,WAAW,KAAKC;GAChB,eAAe,IAAI;GACnB,SAAS,CAAE;GACX,eAAe,IAAI;EACpB;AAED,OAAKH,QAAQ,OAAO,MAAM,oBAAoB;AAC9C,QAAM,KAAKC,SAAS,QAAQ,QAAQ;AAEpC,OAAKD,QAAQ,OAAO,MAAM,iBAAiB;EAC3C,MAAM,UAAU,GAAG,cAAc,EAAE,SAAS,GAAG,YAAY,SAAU,EAAC;AAEtE,SAAO,QAAQ,QAAQ,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC,QAAQ,UAAU,KAAK,AAAC,GAAE,KAAK,UAAU;CACzF;AACF","names":["#logger","#manager","#parser","#outputDir","plugins: readonly PluginConstructor[]","context: GeneratorContext","input: string","storage: SharedStorage"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-core/src/Generator.ts"],"sourcesContent":["import SwaggerParser from '@apidevtools/swagger-parser';\nimport type LoggerFactory from '@vaadin/hilla-generator-utils/LoggerFactory.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport ts from 'typescript';\nimport type { PluginConstructor } from './Plugin.js';\nimport PluginManager from './PluginManager.js';\nimport ReferenceResolver from './ReferenceResolver.js';\nimport type { SharedStorage } from './SharedStorage.js';\n\nexport type GeneratorContext = Readonly<{\n  logger: LoggerFactory;\n  outputDir?: string;\n}>;\n\nexport default class Generator {\n  readonly #logger: LoggerFactory;\n  readonly #manager: PluginManager;\n  readonly #parser: SwaggerParser;\n  readonly #outputDir: string | undefined;\n\n  constructor(plugins: readonly PluginConstructor[], context: GeneratorContext) {\n    this.#parser = new SwaggerParser();\n    this.#manager = new PluginManager(plugins, new ReferenceResolver(this.#parser), context.logger);\n    this.#logger = context.logger;\n    this.#outputDir = context.outputDir;\n  }\n\n  async process(input: string): Promise<readonly File[]> {\n    this.#logger.global.debug('Processing OpenAPI');\n    const api = (await this.#parser.bundle(JSON.parse(input))) as OpenAPIV3.Document;\n\n    const storage: SharedStorage = {\n      api,\n      apiRefs: this.#parser.$refs,\n      outputDir: this.#outputDir,\n      pluginStorage: new Map(),\n      sources: [],\n      transferTypes: new Map(),\n    };\n\n    this.#logger.global.debug('Executing plugins');\n    await this.#manager.execute(storage);\n\n    this.#logger.global.debug('Printing files');\n    const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });\n\n    return storage.sources.map((file) => new File([printer.printFile(file)], file.fileName));\n  }\n}\n"],"version":3}