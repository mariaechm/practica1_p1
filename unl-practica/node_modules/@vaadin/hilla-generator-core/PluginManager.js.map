{"mappings":"AAMA,eAAe,MAAM,cAAc;CACjC,AAASA;CAET,YAAYC,SAAuCC,UAA6BC,QAAuB;EACrG,MAAM,kBAAkB;GACtB;GACA;GACA;GACA;GACA;GACA;GACA;GACA;EACD;EACD,MAAM,gBAAgB,QAAQ,OAAO,CAAC,OAAO,gBAAgB,SAAS,EAAE,KAAK,CAAC;AAC9E,MAAI,cAAc,SAAS,GAAG;AAC5B,UAAO,OAAO,MAAM,WAAW,QAAQ,IAAI,CAAC,EAAE,MAAM,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE;EAC7E;AACD,OAAKH,WAAW,QAAQ,IAAI,CAAC,gBAAgB,IAAI,YAAY,UAAU,QAAQ;CAChF;CAED,MAAM,QAAQI,SAAuC;AAEnD,OAAK,MAAM,UAAU,KAAKJ,UAAU;GAClC,MAAM,EAAE,MAAM,MAAM,GAAG;AACvB,UAAO,OAAO,MAAM,EAAE,QAAQ;IAAE;IAAM;GAAM,EAAE,IAAG,oBAAoB,OAAO,KAAK,GAAG;AAEpF,SAAM,OAAO,QAAQ,QAAQ;EAC9B;CACF;AACF","names":["#plugins","plugins: readonly PluginConstructor[]","resolver: ReferenceResolver","logger: LoggerFactory","storage: SharedStorage"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-core/src/PluginManager.ts"],"sourcesContent":["import type LoggerFactory from '@vaadin/hilla-generator-utils/LoggerFactory.js';\nimport type Plugin from './Plugin.js';\nimport type { PluginConstructor } from './Plugin.js';\nimport type ReferenceResolver from './ReferenceResolver.js';\nimport type { SharedStorage } from './SharedStorage.js';\n\nexport default class PluginManager {\n  readonly #plugins: Plugin[];\n\n  constructor(plugins: readonly PluginConstructor[], resolver: ReferenceResolver, logger: LoggerFactory) {\n    const standardPlugins = [\n      'TransferTypesPlugin',\n      'BackbonePlugin',\n      'ClientPlugin',\n      'BarrelPlugin',\n      'ModelPlugin',\n      'PushPlugin',\n      'SubTypesPlugin',\n      'SignalsPlugin',\n    ];\n    const customPlugins = plugins.filter((p) => !standardPlugins.includes(p.name));\n    if (customPlugins.length > 0) {\n      logger.global.info(`Plugins: ${plugins.map(({ name }) => name).join(', ')}`);\n    }\n    this.#plugins = plugins.map((PluginClass) => new PluginClass(resolver, logger));\n  }\n\n  async execute(storage: SharedStorage): Promise<void> {\n    // We need to run plugins sequentially\n    for (const plugin of this.#plugins) {\n      const { name, path } = plugin;\n      plugin.logger.debug({ plugin: { name, path } }, `Executing plugin '${plugin.name}'`);\n      // eslint-disable-next-line no-await-in-loop\n      await plugin.execute(storage);\n    }\n  }\n}\n"],"version":3}