{"version":3,"file":"Models.js","sourceRoot":"","sources":["src/Models.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,SAAS,MAAM,+BAA+B,CAAC;AACtD,OAAO,EAAmB,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEjE,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAE3C,MAAM,CAAC,MAAM,qBAAqB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AACpE,MAAM,CAAC,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AACxC,MAAM,CAAC,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAClC,MAAM,CAAC,MAAM,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;AAChD,MAAM,CAAC,MAAM,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;AAChD,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AACpC,MAAM,CAAC,MAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAC5D,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AACpC,MAAM,CAAC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;AAEtC,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAMrC,MAAM,UAAU,aAAa,CAAI,KAAuB;IACtD,OAAO,WAAW,IAAI,KAAK,CAAC;AAC9B,CAAC;AAID,MAAM,CAAC,MAAM,mBAAmB,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;AAwB1D,MAAM,UAAU,mBAAmB,CAA0B,IAAiC;IAC5F,OAAO,IAAI,IAAI,CAAC,mBAAmB,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,OAAgB,aAAa;IACjC,MAAM,CAAC,gBAAgB;QACrB,OAAO,SAAS,CAAC;IACnB,CAAC;IAcD,YAAY,MAAmB,EAAE,GAAc,EAAE,QAAiB,EAAE,OAAyB;QAVpF;;;;;WAAwB;QAExB;;;;;WAA2C;QAE3C;;;;;WAAuB;QAEvB;;;;;WAAqB;QAE9B;;;;;WAAkB;QAGhB,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QACjB,IAAI,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,GAAG,OAAO,EAAE,UAAU,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC;IACpC,CAAC;IAUD,QAAQ;QACN,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAChC,CAAC;IAUD,OAAO;QACL,MAAM,EAAE,KAAK,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QAEtC,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,MAAM,IAAI,SAAS,CAAC,oBAAoB,CAAC,CAAC;QAC5C,CAAC;QAED,OAAO,KAAW,CAAC;IACrB,CAAC;CACF;KA/CW,OAAO,OAEP,WAAW,OAEX,KAAK,OAEL,SAAS,OAElB,IAAI;AAyCP,MAAM,OAAgB,cAAkB,SAAQ,aAAgB;CAAG;AAEnE,MAAM,OAAO,YAAa,SAAQ,cAAuB;IAGvD,CAAC,WAAW,CAAC,CAAC,GAAW;QAGvB,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAC1D,CAAC;;AANe;;;;WAAmB,OAAO;GAAC;AAS7C,MAAM,OAAO,WAAY,SAAQ,cAAsB;IACrD,MAAM,CAAU,gBAAgB;QAC9B,OAAO,GAAG,CAAC;IACb,CAAC;IAED,YAAY,MAAmB,EAAE,GAAc,EAAE,QAAiB,EAAE,OAA8B;QAEhG,MAAM,UAAU,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC;QAC5E,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,GAAG,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,CAAC,WAAW,CAAC,CAAC,GAAW;QAGvB,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;YACf,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD,CAAC;CACF;AAED,MAAM,OAAO,WAAY,SAAQ,cAAsB;IAAvD;;QAEE;;;;mBAAgB,MAAM;WAAC;IACzB,CAAC;;KADE,WAAW;AADI;;;;WAAmB,MAAM;EAAT,CAAU;AAO5C,MAAM,UAAU,yBAAyB,CAAsB,IAAiC;IAC9F,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC1D,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAa,CAAC;IAE9D,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC;AAC5B,CAAC;AAED,MAAM,OAAgB,SACpB,SAAQ,aAAyB;IAKjC,CAAC,WAAW,CAAC,CAAC,KAAa;QACzB,OAAO,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,KAAoB,CAAC,CAAC,CAAC,SAAS,CAAC;IAClE,CAAC;CACF;AAED,MAAM,SAAS,CAAC,CAAC,iCAAiC,CAChD,KAAQ;IAER,KACE,IAAI,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,EACxC,KAAK,KAAK,WAAW,CAAC,SAAS,EAC/B,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,EACpC,CAAC;QACD,MAAM,WAAW,GAAG,MAAM,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;QAE5D,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YAC1D,IAAI,GAAG,EAAE,CAAC;gBACR,MAAM,CAAC,IAAsB,EAAE,GAAG,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAwB,IAAiC;IAClG,MAAM,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAExC,OAAO,GAAG,EAAE;QAEV,MAAM,GAAG,GAAsB,EAAE,CAAC;QAIlC,KAAK,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,iCAAiC,CAAC,KAAK,CAAC,EAAE,CAAC;YACrE,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,GAAG,CAAC,GAAG,CAAC,GAAG,CACT,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,gBAAgB,EAAE,CACxD,CAAC;QAChC,CAAC;QAED,OAAO,GAAe,CAAC;IACzB,CAAC,CAAC;AACJ,CAAC;AAID,MAAM,OAAO,WAAmE,SAAQ,aAAgB;IAAxG;;QAGE,kCAAqD,EAAE,EAAC;IAY1D,CAAC;IAVW,2CAAC,iBAAiB,EAAC,CAC3B,GAAM,EACN,IAAiC;QAEjC,IAAI,CAAC,uBAAA,IAAI,+BAAY,CAAC,GAAG,CAAC,EAAE,CAAC;YAC3B,uBAAA,IAAI,+BAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC1C,CAAC;QAED,OAAO,uBAAA,IAAI,+BAAY,CAAC,GAAG,CAAM,CAAC;IACpC,CAAC;;AAbe;;;;WAAmB,2BAA2B,CAAC,WAAW,CAAC;EAA3C,CAA4C;AAkB9E,MAAM,OAAO,UAAwD,SAAQ,aAAkC;IAC7G,MAAM,CAAU,gBAAgB;QAC9B,OAAO,EAAE,CAAC;IACZ,CAAC;IAUD,YACE,MAAmB,EACnB,GAAc,EACd,QAAiB,EACjB,UAAyD,EACzD,OAA2C;QAE3C,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAfxC;;;;;WAA4C;QAInC,yCAA6D;QACtE,4BAAmC,EAAE,EAAC;QAWpC,uBAAA,IAAI,0BAAe,UAAU,MAAA,CAAC;QAC9B,IAAI,CAAC,qBAAqB,CAAC,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,gBAAsC,CAAC;IACvG,CAAC;IAED,CAAC,kFApBA,qBAAqB,EAoBpB,MAAM,EAAC;QACP,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;QAE/C,IAAI,MAAM,CAAC,MAAM,KAAK,uBAAA,IAAI,yBAAO,CAAC,MAAM,EAAE,CAAC;YACzC,uBAAA,IAAI,yBAAO,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QACrC,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAI,IAAI,GAAsB,uBAAA,IAAI,yBAAO,CAAC,CAAC,CAAC,CAAC;YAE7C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,IAAI,GAAG,uBAAA,IAAI,8BAAY,MAAhB,IAAI,EAAa,IAAI,EAAE,CAAC,CAAC,CAAC;gBACjC,uBAAA,IAAI,yBAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YACxB,CAAC;YAED,MAAM,IAAI,CAAC;QACb,CAAC;IACH,CAAC;IAqBD,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;YAClC,MAAM,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;CACF;AAED,MAAM,CAAC,MAAM,CAAC,GAAG;IAOf,KAAK,CAAuB,KAAQ;QAClC,OAAO,KAAK,CAAC,MAAM,CAAC,EAA8C,CAAC;IACrE,CAAC;CACF,CAAC","sourcesContent":["import isNumeric from 'validator/es/lib/isNumeric.js';\nimport { type BinderNode, getBinderNode } from './BinderNode.js';\nimport type { Validator } from './Validation.js';\nimport { IsNumber } from './Validators.js';\n\nexport const _createEmptyItemValue = Symbol('createEmptyItemValue');\nexport const _parent = Symbol('parent');\nexport const _key = Symbol('key');\nexport const _fromString = Symbol('fromString');\nexport const _validators = Symbol('validators');\nexport const _meta = Symbol('meta');\nexport const _getPropertyModel = Symbol('getPropertyModel');\nexport const _enum = Symbol('enum');\nexport const _items = Symbol('items');\n\nconst _optional = Symbol('optional');\n\nexport interface HasFromString<T> {\n  [_fromString](value: string): T;\n}\n\nexport function hasFromString<T>(model: AbstractModel<T>): model is AbstractModel<T> & HasFromString<T> {\n  return _fromString in model;\n}\n\nexport type Value<M> = M extends AbstractModel<infer T> ? T : never;\n\nexport const modelDetachedParent = { $value$: undefined };\n\nexport type ModelParent = AbstractModel | BinderNode | typeof modelDetachedParent;\n\nexport interface Annotation {\n  name: string;\n  attributes?: Record<string, unknown>;\n}\n\nexport interface ModelMetadata {\n  javaType?: string;\n  annotations?: Annotation[];\n}\n\nexport interface ModelOptions<T> {\n  validators?: ReadonlyArray<Validator<T>>;\n  meta?: ModelMetadata;\n}\n\nexport type DetachedModelConstructor<M> = {\n  prototype: object;\n  new (parent: typeof modelDetachedParent, key: '$value$', optional: boolean): M;\n};\n\nexport function createDetachedModel<M extends AbstractModel>(type: DetachedModelConstructor<M>): M {\n  return new type(modelDetachedParent, '$value$', false);\n}\n\nexport abstract class AbstractModel<T = unknown> {\n  static createEmptyValue(): unknown {\n    return undefined;\n  }\n\n  declare readonly ['constructor']: typeof AbstractModel<T>;\n\n  readonly [_parent]?: ModelParent;\n\n  readonly [_validators]: ReadonlyArray<Validator<T>>;\n\n  readonly [_meta]: ModelMetadata;\n\n  readonly [_optional]: boolean;\n\n  [_key]: keyof any;\n\n  constructor(parent: ModelParent, key: keyof any, optional: boolean, options?: ModelOptions<T>) {\n    this[_parent] = parent;\n    this[_key] = key;\n    this[_optional] = optional;\n    this[_validators] = options?.validators ?? [];\n    this[_meta] = options?.meta ?? {};\n  }\n\n  /**\n   * @deprecated Use {@link BinderNode.value} with string conversion instead\n   *\n   * @example\n   * ```ts\n   * const result = String(binder.for(model).value);\n   * ```\n   */\n  toString(): string {\n    return String(this.valueOf());\n  }\n\n  /**\n   * @deprecated Use {@link BinderNode.value} instead\n   *\n   * @example\n   * ```ts\n   * const result = binder.for(model).value;\n   * ```\n   */\n  valueOf(): T {\n    const { value } = getBinderNode(this);\n\n    if (value === undefined) {\n      throw new TypeError('Value is undefined');\n    }\n\n    return value! as T;\n  }\n}\n\nexport abstract class PrimitiveModel<T> extends AbstractModel<T> {}\n\nexport class BooleanModel extends PrimitiveModel<boolean> implements HasFromString<boolean> {\n  static override createEmptyValue = Boolean;\n\n  [_fromString](str: string): boolean {\n    // This implementation matches the values accepted by validator.js and converts all other values to false\n    // See https://github.com/validatorjs/validator.js/blob/master/src/lib/isBoolean.js\n    return ['true', '1', 'yes'].includes(str.toLowerCase());\n  }\n}\n\nexport class NumberModel extends PrimitiveModel<number> implements HasFromString<number | undefined> {\n  static override createEmptyValue(): number {\n    return NaN;\n  }\n\n  constructor(parent: ModelParent, key: keyof any, optional: boolean, options?: ModelOptions<number>) {\n    // Prepend a built-in validator to indicate NaN input\n    const validators = [new IsNumber(optional), ...(options?.validators ?? [])];\n    super(parent, key, optional, { ...options, validators });\n  }\n\n  [_fromString](str: string): number | undefined {\n    // Returning undefined is needed to support passing the validation when the value of an optional number field is\n    // an empty string\n    if (str === '') {\n      return undefined;\n    }\n    return isNumeric(str) ? Number.parseFloat(str) : NaN;\n  }\n}\n\nexport class StringModel extends PrimitiveModel<string> implements HasFromString<string> {\n  static override createEmptyValue = String;\n  [_fromString] = String;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ndeclare enum Enum {}\n\nexport function makeEnumEmptyValueCreator<M extends EnumModel>(type: DetachedModelConstructor<M>): () => Value<M> {\n  const { [_enum]: enumObject } = createDetachedModel(type);\n  const defaultValue = Object.values(enumObject)[0] as Value<M>;\n\n  return () => defaultValue;\n}\n\nexport abstract class EnumModel<E extends typeof Enum = typeof Enum>\n  extends AbstractModel<E[keyof E]>\n  implements HasFromString<E[keyof E] | undefined>\n{\n  abstract readonly [_enum]: E;\n\n  [_fromString](value: string): E[keyof E] | undefined {\n    return value in this[_enum] ? (value as E[keyof E]) : undefined;\n  }\n}\n\nexport function* getObjectModelOwnAndParentGetters<M extends ObjectModel>(\n  model: M,\n): Generator<readonly [key: keyof Value<M>, getter: () => AbstractModel]> {\n  for (\n    let proto = Object.getPrototypeOf(model);\n    proto !== ObjectModel.prototype;\n    proto = Object.getPrototypeOf(proto)\n  ) {\n    const descriptors = Object.getOwnPropertyDescriptors(proto);\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    for (const [name, { get }] of Object.entries(descriptors)) {\n      if (get) {\n        yield [name as keyof Value<M>, get];\n      }\n    }\n  }\n}\n\nexport function makeObjectEmptyValueCreator<M extends ObjectModel>(type: DetachedModelConstructor<M>): () => Value<M> {\n  const model = createDetachedModel(type);\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const obj: Partial<Value<M>> = {};\n\n    // Iterate the model class hierarchy up to the ObjectModel, and extract\n    // the property getter names from every prototypes\n    for (const [key, getter] of getObjectModelOwnAndParentGetters(model)) {\n      const propertyModel = getter.call(model);\n      obj[key] = (\n        propertyModel[_optional] ? undefined : propertyModel.constructor.createEmptyValue()\n      ) as Value<M>[keyof Value<M>];\n    }\n\n    return obj as Value<M>;\n  };\n}\n\ntype ChildModel<T extends Record<never, never>, K extends keyof T> = AbstractModel<NonNullable<T[K]>>;\n\nexport class ObjectModel<T extends Record<never, never> = Record<never, never>> extends AbstractModel<T> {\n  static override createEmptyValue = makeObjectEmptyValueCreator(ObjectModel);\n\n  #properties: { [K in keyof T]?: ChildModel<T, K> } = {};\n\n  protected [_getPropertyModel]<K extends keyof T, M extends ChildModel<T, K>>(\n    key: K,\n    init: (parent: this, key: K) => M,\n  ): M {\n    if (!this.#properties[key]) {\n      this.#properties[key] = init(this, key);\n    }\n\n    return this.#properties[key] as M;\n  }\n}\n\nexport type ArrayItemModel<M> = M extends ArrayModel<infer MItem> ? MItem : never;\n\nexport class ArrayModel<MItem extends AbstractModel = AbstractModel> extends AbstractModel<Array<Value<MItem>>> {\n  static override createEmptyValue(): [] {\n    return [];\n  }\n\n  [_createEmptyItemValue]: () => Value<MItem>;\n\n  // The `parent` parameter is AbstractModel here for purpose; for some reason, setting it to `ArrayModel<MItem>` or\n  // `this` breaks the type inference in TS (v5.3.2).\n  readonly #createItem: (parent: AbstractModel, index: number) => MItem;\n  #items: Array<MItem | undefined> = [];\n\n  // eslint-disable-next-line @typescript-eslint/max-params\n  constructor(\n    parent: ModelParent,\n    key: keyof any,\n    optional: boolean,\n    createItem: (parent: AbstractModel, key: number) => MItem,\n    options?: ModelOptions<Array<Value<MItem>>>,\n  ) {\n    super(parent, key, optional, options);\n    this.#createItem = createItem;\n    this[_createEmptyItemValue] = createItem(this, 0).constructor.createEmptyValue as () => Value<MItem>;\n  }\n\n  *[_items](): Generator<MItem, void, void> {\n    const values = getBinderNode(this).value ?? [];\n\n    if (values.length !== this.#items.length) {\n      this.#items.length = values.length;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      let item: MItem | undefined = this.#items[i];\n\n      if (!item) {\n        item = this.#createItem(this, i);\n        this.#items[i] = item;\n      }\n\n      yield item;\n    }\n  }\n\n  /**\n   * Iterates over the current model and yields a binder node for every item\n   * model.\n   *\n   * @deprecated Use the {@link m.items} function instead. For example, in React:\n   * ```tsx\n   * const {model, field} = useForm(GroupModel);\n   * return Array.from(m.items(model.people), (personModel) =>\n   *   <TextField label=\"Full name\" {...field(personModel.fullName)} />\n   * );\n   * ```\n   * In Lit:\n   * ```ts\n   * return html`${repeat(\n   *   m.items(this.binder.model.people),\n   *   (personModel) => html`<vaadin-text-field label=\"Full name\" ${field(personModel.fullName)}></vaadin-text-field>`,\n   * )}`;\n   * ```\n   */\n  *[Symbol.iterator](): IterableIterator<BinderNode<MItem>> {\n    for (const item of this[_items]()) {\n      yield getBinderNode(item);\n    }\n  }\n}\n\nexport const m = {\n  /**\n   * Returns an iterator over item models in the array model.\n   *\n   * @param model - The array model to iterate over.\n   * @returns An iterator over item models.\n   */\n  items<M extends ArrayModel>(model: M): Generator<ArrayItemModel<M>, void, void> {\n    return model[_items]() as Generator<ArrayItemModel<M>, void, void>;\n  },\n};\n"]}