{"version":3,"file":"Validation.js","sourceRoot":"","sources":["src/Validation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BinderNode } from './BinderNode.js';\nimport { getBinderNode } from './BinderNode.js';\nimport type { BinderRoot } from './BinderRoot.js';\nimport { AbstractModel, type Value } from './Models.js';\nimport { IsNumber, Required, ValidityStateValidator } from './Validators.js';\n\nexport interface ValueError<T = unknown> {\n  property: AbstractModel | string;\n  message: string;\n  value: T;\n  validator: Validator<T>;\n  validatorMessage?: string;\n}\n\nexport interface ValidationResult {\n  property: AbstractModel | string;\n  message?: string;\n}\n\nexport class ValidationError extends Error {\n  errors: readonly ValueError[];\n\n  constructor(errors: readonly ValueError[]) {\n    super(\n      [\n        'There are validation errors in the form.',\n        ...errors.map((e) => {\n          const property = e.property instanceof AbstractModel ? String(getBinderNode(e.property).value) : e.property;\n          return `${property} - ${e.validator.constructor.name}${e.message ? `: ${e.message}` : ''}`;\n        }),\n      ].join('\\n - '),\n    );\n    this.errors = errors;\n    this.name = this.constructor.name;\n  }\n}\n\nexport type InterpolateMessageCallback<M extends AbstractModel> = (\n  message: string,\n  validator: Validator<Value<M>>,\n  binderNode: BinderNode<M>,\n) => string;\n\nexport interface Validator<T = unknown> {\n  message: string;\n  impliesRequired?: boolean;\n  name?: string;\n\n  validate(\n    value: T,\n    binder: BinderRoot,\n  ):\n    | Promise<ValidationResult | boolean | readonly ValidationResult[]>\n    | ValidationResult\n    | boolean\n    | readonly ValidationResult[];\n}\n\nexport class ServerValidator implements Validator {\n  name = 'ServerValidator';\n  message: string;\n\n  constructor(message: string) {\n    this.message = message;\n  }\n\n  validate = (): boolean => false;\n}\n\n// The `property` field of `ValidationResult`s is a path relative to the parent.\nfunction setPropertyAbsolutePath(binderNodeName: string, result: ValidationResult): ValidationResult {\n  if (typeof result.property === 'string' && binderNodeName.length > 0) {\n    result.property = `${binderNodeName}.${result.property}`;\n  }\n  return result;\n}\n\nexport async function runValidator<M extends AbstractModel>(\n  model: M,\n  validator: Validator<Value<M>>,\n  interpolateMessageCallback?: InterpolateMessageCallback<M>,\n): Promise<ReadonlyArray<ValueError<Value<M>>>> {\n  const binderNode = getBinderNode(model);\n  const value = binderNode.value as Value<M>;\n\n  const interpolateMessage = (message: string) => {\n    if (!interpolateMessageCallback) {\n      return message;\n    }\n    return interpolateMessageCallback(message, validator, binderNode);\n  };\n\n  // If model is not required and value empty, do not run any validator. Except\n  // always validate NumberModel, which has a mandatory builtin validator\n  // to indicate NaN input.\n  if (\n    !binderNode.required &&\n    !new Required().validate(value) &&\n    !(validator instanceof IsNumber) &&\n    !(validator instanceof ValidityStateValidator)\n  ) {\n    return [];\n  }\n\n  try {\n    const result = await validator.validate(value, binderNode.binder);\n\n    if (result === false) {\n      return [\n        {\n          message: interpolateMessage(validator.message),\n          property: binderNode.name,\n          validator,\n          value,\n        },\n      ];\n    }\n\n    if (result === true || (Array.isArray(result) && result.length === 0)) {\n      return [];\n    }\n\n    if (Array.isArray(result)) {\n      return result.map((result2) => ({\n        message: interpolateMessage(validator.message),\n        ...setPropertyAbsolutePath(binderNode.name, result2),\n        validator,\n        value,\n      }));\n    }\n\n    return [\n      {\n        message: interpolateMessage(validator.message),\n        ...setPropertyAbsolutePath(binderNode.name, result as ValidationResult),\n        validator,\n        value,\n      },\n    ];\n  } catch (error: unknown) {\n    console.error(`${binderNode.name} - Validator ${validator.constructor.name} threw an error:`, error);\n    return [{ message: 'Validator threw an error', property: binderNode.name, validator, value }];\n  }\n}\n"]}