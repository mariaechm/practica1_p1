{"version":3,"file":"Validators.js","sourceRoot":"","sources":["src/Validators.ts"],"names":[],"mappings":"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","sourcesContent":["import isAfter from 'validator/es/lib/isAfter.js';\nimport isBefore from 'validator/es/lib/isBefore.js';\nimport isBoolean from 'validator/es/lib/isBoolean.js';\nimport isDecimal from 'validator/es/lib/isDecimal.js';\nimport isEmail from 'validator/es/lib/isEmail.js';\nimport isFloat from 'validator/es/lib/isFloat.js';\nimport isLength from 'validator/es/lib/isLength.js';\nimport matches from 'validator/es/lib/matches.js';\nimport toFloat from 'validator/es/lib/toFloat.js';\nimport type { Validator } from './Validation.js';\n\ninterface ValidatorAttributes {\n  message?: string;\n}\ninterface ValueNumberAttributes extends ValidatorAttributes {\n  value: number | string;\n}\ninterface DigitAttributes extends ValidatorAttributes {\n  integer: number;\n  fraction: number;\n}\ninterface SizeAttributes extends ValidatorAttributes {\n  min?: number;\n  max?: number;\n}\ninterface PatternAttributes extends ValidatorAttributes {\n  regexp: RegExp | string;\n}\ninterface DecimalAttributes extends ValueNumberAttributes {\n  inclusive?: boolean;\n}\n\nabstract class AbstractValidator<T> implements Validator<T> {\n  message = 'invalid';\n\n  impliesRequired = false;\n\n  constructor(attrs?: ValidatorAttributes) {\n    if (attrs?.message) {\n      this.message = attrs.message;\n    }\n  }\n\n  abstract validate(value: T): Promise<boolean> | boolean;\n  abstract get name(): string;\n}\n\nexport class Required<T> extends AbstractValidator<T> {\n  override impliesRequired = true;\n\n  override validate(value: T): boolean {\n    if (typeof value === 'string' || Array.isArray(value)) {\n      return value.length > 0;\n    }\n    if (typeof value === 'number') {\n      return Number.isFinite(value);\n    }\n    return value !== undefined;\n  }\n\n  readonly name: string = 'Required';\n}\n\nfunction _asValidatorAttributes(attrs: PatternAttributes | RegExp | ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs : {};\n}\n\nfunction _value(attrs: ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs.value : attrs;\n}\n\nabstract class NumberValidator<T> extends AbstractValidator<T> {\n  override validate(value: T) {\n    const num = Number(value);\n    return !isNaN(num) && isFinite(num);\n  }\n}\n\nexport class IsNumber extends NumberValidator<number | null | undefined> {\n  optional: boolean;\n\n  constructor(optional: boolean, attrs?: ValidatorAttributes) {\n    super({ message: 'must be a number', ...attrs });\n    this.optional = optional;\n  }\n\n  override validate(value: number | null | undefined): boolean {\n    return (this.optional && value == null) || super.validate(value);\n  }\n\n  readonly name = 'IsNumber';\n}\n\nabstract class ValueNumberValidator<T> extends NumberValidator<T> {\n  value: number;\n\n  protected constructor(attrs: ValueNumberAttributes | number | string) {\n    super(_asValidatorAttributes(attrs));\n    const val = _value(attrs);\n    this.value = typeof val === 'string' ? parseFloat(val) : val;\n  }\n}\n\n// JSR380 equivalent (https://beanvalidation.org/2.0/spec/#builtinconstraints)\nexport class Email extends AbstractValidator<string> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a well-formed email address', ...attrs });\n  }\n\n  override validate(value: string | null | undefined): boolean {\n    return !value || isEmail(value);\n  }\n\n  readonly name = 'Email';\n}\n\nexport class Null extends AbstractValidator<any> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be null', ...attrs });\n  }\n\n  override validate(value: any): boolean {\n    return value == null;\n  }\n\n  readonly name = 'Null';\n}\n\nexport class NotNull<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be null', ...attrs });\n  }\n\n  override validate(value: T): value is NonNullable<T> {\n    return !new Null().validate(value);\n  }\n\n  override readonly name = 'NotNull';\n}\n\nexport class NotEmpty<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be empty', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return (\n      super.validate(value) && new NotNull<T>().validate(value) && ((value as { length?: number }).length ?? 0) > 0\n    );\n  }\n\n  override readonly name = 'NotEmpty';\n}\n\nexport class NotBlank<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be blank', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && new NotNull<T>().validate(value) && String(value).trim().length > 0;\n  }\n\n  override readonly name = 'NotBlank';\n}\n\nexport class AssertTrue<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be true', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isBoolean(String(value)) && String(value) === 'true';\n  }\n\n  readonly name = 'AssertTrue';\n}\n\nexport class AssertFalse<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be false', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return !new AssertTrue<T>().validate(value);\n  }\n\n  readonly name = 'AssertFalse';\n}\n\nfunction _asValueNumberAttributes(attrs: ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs : { value: attrs };\n}\n\nexport class Min<T> extends ValueNumberValidator<T> {\n  constructor(attrs: ValueNumberAttributes | number | string) {\n    super({\n      message: `must be greater than or equal to ${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { min: this.value });\n  }\n\n  readonly name = 'Min';\n}\n\nexport class Max<T> extends ValueNumberValidator<T> {\n  constructor(attrs: ValueNumberAttributes | number | string) {\n    super({\n      message: `must be less than or equal to ${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { max: this.value });\n  }\n\n  readonly name = 'Max';\n}\n\nfunction _inclusive(attrs: DecimalAttributes | number | string) {\n  return typeof attrs !== 'object' || attrs.inclusive !== false;\n}\n\nexport class DecimalMin<T> extends ValueNumberValidator<T> {\n  inclusive: boolean;\n\n  constructor(attrs: DecimalAttributes | number | string) {\n    super({\n      message: `must be greater than ${_inclusive(attrs) ? 'or equal to ' : ''}${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n    this.inclusive = _inclusive(attrs);\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { [this.inclusive ? 'min' : 'gt']: this.value });\n  }\n\n  readonly name = 'DecimalMin';\n}\n\nexport class DecimalMax<T> extends ValueNumberValidator<T> {\n  inclusive: boolean;\n\n  constructor(attrs: DecimalAttributes | number | string) {\n    super({\n      message: `must be less than ${_inclusive(attrs) ? 'or equal to ' : ''}${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n    this.inclusive = _inclusive(attrs);\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { [this.inclusive ? 'max' : 'lt']: this.value });\n  }\n\n  readonly name = 'DecimalMax';\n}\n\nexport class Negative<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be less than 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    const fv = toFloat(String(value));\n    return isNaN(fv) || fv < 0;\n  }\n\n  readonly name = 'Negative';\n}\n\nexport class NegativeOrZero<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be less than or equal to 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return (toFloat(String(value)) || 0) <= 0;\n  }\n\n  readonly name = 'NegativeOrZero';\n}\n\nexport class Positive<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be greater than 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    const fv = toFloat(String(value));\n    return isNaN(fv) || fv > 0;\n  }\n\n  readonly name = 'Positive';\n}\n\nexport class PositiveOrZero<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be greater than or equal to 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return (toFloat(String(value)) || 0) >= 0;\n  }\n\n  readonly name = 'PositiveOrZero';\n}\n\nfunction _min(attrs: SizeAttributes) {\n  return attrs.min ?? 0;\n}\n\nfunction _max(attrs: SizeAttributes) {\n  return attrs.max ?? Number.MAX_SAFE_INTEGER;\n}\n\nexport class Size extends AbstractValidator<string> {\n  min: number;\n  max: number;\n\n  constructor(attrs: SizeAttributes = {}) {\n    super({ message: `size must be between ${_min(attrs)} and ${_max(attrs)}`, ...attrs });\n    this.min = _min(attrs);\n    this.max = _max(attrs);\n    if (this.min > 0) {\n      this.impliesRequired = true;\n    }\n  }\n\n  override validate(value: string): boolean {\n    if (this.min && this.min > 0 && !new Required().validate(value)) {\n      return false;\n    }\n    // eslint-disable-next-line sort-keys\n    return isLength(value, { min: this.min, max: this.max });\n  }\n\n  readonly name = 'Size';\n}\n\nexport class Digits<T> extends AbstractValidator<T> {\n  integer: number;\n  fraction: number;\n\n  constructor(attrs: DigitAttributes) {\n    super({\n      message: `numeric value out of bounds (<${attrs.integer} digits>.<${attrs.fraction} digits> expected)`,\n      ...attrs,\n    });\n    this.integer = attrs.integer;\n    this.fraction = attrs.fraction;\n  }\n\n  override validate(value: T): boolean {\n    return (\n      String(Math.floor(Math.abs(toFloat(String(value))))).length <= this.integer &&\n      // eslint-disable-next-line camelcase\n      isDecimal(String(value), { decimal_digits: `0,${this.fraction}` })\n    );\n  }\n\n  readonly name = 'Digits';\n}\n\nexport class Past<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a past date', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isBefore(String(value));\n  }\n\n  readonly name = 'Past';\n}\n\n/*\n  @PastOrPresent has no client-side implementation yet.\n  It would consider any input valid and let the server-side to do validation.\n  (It's not trivial to ensure the same granularity of _present_ as on the server-side:\n  year / month / day / minute).\n*/\n// export class PastOrPresent extends AbstractValidator<any> {\n//   constructor(attrs?: ValidatorAttributes) {\n//     super({ message: 'must be a date in the past or in the present', ...attrs });\n//   }\n//   validate() {\n//     return true;\n//   }\n// }\n\nexport class Future<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a future date', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isAfter(String(value));\n  }\n\n  readonly name = 'Future';\n}\n\n/*\n  @FutureOrPresent has no client-side implementation yet.\n  It would consider any input valid and let the server-side to do validation.\n  (It's not trivial to ensure the same granularity of _present_ as on the server-side:\n  year / month / day / minute).\n*/\n// export class FutureOrPresent extends AbstractValidator<any> {\n//   constructor(attrs?: ValidatorAttributes) {\n//     super({ message: 'must be a date in the present or in the future', ...attrs });\n//   }\n//   validate = () => true;\n// }\n\nfunction _regexp(attrs: PatternAttributes | RegExp | string) {\n  if (typeof attrs === 'string') {\n    return new RegExp(attrs, 'u');\n  }\n\n  if (attrs instanceof RegExp) {\n    return attrs;\n  }\n\n  if (typeof attrs.regexp === 'string') {\n    return new RegExp(attrs.regexp, 'u');\n  }\n\n  return attrs.regexp;\n}\n\nexport class Pattern extends AbstractValidator<string> {\n  regexp: RegExp;\n\n  constructor(attrs: PatternAttributes | RegExp | string) {\n    super({\n      message: `must match the following regular expression: ${_regexp(attrs).toString()}`,\n      ..._asValidatorAttributes(attrs),\n    });\n    this.regexp = _regexp(attrs);\n  }\n\n  override validate(value: any): boolean {\n    return matches(value, this.regexp);\n  }\n\n  readonly name = 'Pattern';\n}\n\n/**\n * Validator that reports an error when the bound HTML element validation\n * returns false from `element.checkValidity()` and `element.validity.valid`.\n */\nexport class ValidityStateValidator<T> extends AbstractValidator<T> {\n  override message = '';\n\n  // eslint-disable-next-line no-useless-constructor,@typescript-eslint/no-useless-constructor\n  constructor() {\n    super();\n  }\n\n  override validate(): boolean {\n    return false;\n  }\n\n  readonly name = 'ValidityStateValidator';\n}\n"]}