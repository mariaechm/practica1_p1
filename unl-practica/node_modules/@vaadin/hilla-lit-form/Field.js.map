{"version":3,"file":"Field.js","sourceRoot":"","sources":["src/Field.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable accessor-pairs,no-void,sort-keys */\nimport { type ElementPart, noChange, nothing, type PropertyPart } from 'lit';\nimport { directive, Directive, type DirectiveParameters, type PartInfo, PartType } from 'lit/directive.js';\nimport { getBinderNode } from './BinderNode.js';\nimport {\n  _fromString,\n  type AbstractModel,\n  ArrayModel,\n  BooleanModel,\n  hasFromString,\n  NumberModel,\n  ObjectModel,\n} from './Models.js';\nimport { StringModel } from './Models.js';\nimport type { ValueError } from './Validation.js';\nimport { _validity, defaultValidity } from './Validity.js';\n\nexport interface FieldBase<T> {\n  required: boolean;\n  invalid: boolean;\n  errorMessage: string;\n  value: T | undefined;\n}\n\n/**\n * Subset of the HTML constraint validation API with the `checkValidity()` method.\n */\nexport type FieldConstraintValidation = Readonly<{\n  validity: ValidityState;\n  checkValidity(): boolean;\n}>;\n\nexport type FieldElement<T = unknown> = FieldBase<T> & HTMLElement & Partial<FieldConstraintValidation>;\n\nconst props = ['required', 'invalid', 'errorMessage', 'value', 'validity', 'checkValidity'];\n\nexport function isFieldElement<T>(element: HTMLElement): element is FieldElement<T> {\n  return props.some((prop) => prop in element);\n}\n\ninterface FieldElementHolder<T> {\n  get element(): FieldElement<T>;\n\n  /**\n   * @param element - the new element value\n   * @deprecated will be read-only in future\n   */\n  set element(element: FieldElement<T>);\n}\n\ninterface Field<T> extends FieldBase<T> {\n  readonly model?: AbstractModel<T>;\n}\n\ninterface FieldState<T> extends Field<T>, FieldElementHolder<T> {\n  name: string;\n  validity: ValidityState;\n  strategy: FieldStrategy<T>;\n}\n\ntype EventHandler = (event: Event) => void;\n\nexport type FieldStrategy<T = any> = Field<T> &\n  FieldConstraintValidation & {\n    onChange?: EventHandler;\n    onInput?: EventHandler;\n    removeEventListeners(): void;\n  };\n\nexport abstract class AbstractFieldStrategy<T = any, E extends FieldElement<T> = FieldElement<T>>\n  implements FieldStrategy<T>\n{\n  abstract required: boolean;\n\n  abstract invalid: boolean;\n\n  readonly model?: AbstractModel<T>;\n\n  #element: E;\n\n  /**\n   * @privateRemarks\n   * Fallback for missing .validity property API in Vaadin components.\n   */\n  #validityFallback: ValidityState = defaultValidity;\n\n  readonly #eventHandlers = new Map<string, EventHandler>();\n\n  constructor(element: E, model?: AbstractModel<T>) {\n    this.#element = element;\n    this.model = model;\n  }\n\n  get element(): E {\n    return this.#element;\n  }\n\n  /**\n   * @param element - the new element value\n   * @deprecated will be read-only in future\n   */\n  set element(element: E) {\n    this.#element = element;\n  }\n\n  get value(): T | undefined {\n    return this.#element.value;\n  }\n\n  set value(value: T | undefined) {\n    if (this.model instanceof StringModel || this.model instanceof NumberModel) {\n      this.#element.value = value ?? ('' as T);\n      return;\n    }\n    this.#element.value = value;\n  }\n\n  set errorMessage(_: string) {}\n\n  get validity(): ValidityState {\n    return this.#element.validity ?? this.#validityFallback;\n  }\n\n  get onChange(): EventHandler | undefined {\n    return this.#eventHandlers.get('change');\n  }\n\n  set onChange(onChange: EventHandler | undefined) {\n    this.#setEventHandler('change', onChange);\n  }\n\n  get onInput(): EventHandler | undefined {\n    return this.#getEventHandler('input');\n  }\n\n  set onInput(onInput: EventHandler | undefined) {\n    this.#setEventHandler('input', onInput);\n  }\n\n  checkValidity(): boolean {\n    if (!this.#element.checkValidity) {\n      return true;\n    }\n\n    const valid = this.#element.checkValidity();\n    this.#validityFallback = {\n      ...defaultValidity,\n      valid,\n      ...(valid ? {} : this.#detectValidityError()),\n    };\n    return valid;\n  }\n\n  setAttribute(key: string, val: any): void {\n    if (val) {\n      this.#element.setAttribute(key, '');\n    } else {\n      this.#element.removeAttribute(key);\n    }\n  }\n\n  removeEventListeners(): void {\n    for (const [type, handler] of this.#eventHandlers) {\n      this.element.removeEventListener(type, handler);\n      this.#eventHandlers.delete(type);\n    }\n  }\n\n  #getEventHandler(type: string): EventHandler | undefined {\n    return this.#eventHandlers.get(type);\n  }\n\n  #setEventHandler(type: string, handler?: EventHandler) {\n    if (this.#eventHandlers.has(type)) {\n      this.element.removeEventListener(type, this.#eventHandlers.get(type)!);\n    }\n\n    if (handler) {\n      this.element.addEventListener(type, handler);\n      this.#eventHandlers.set(type, handler);\n    } else {\n      this.#eventHandlers.delete(type);\n    }\n  }\n\n  #detectValidityError(): Readonly<Partial<ValidityState>> {\n    if (!('inputElement' in this.#element)) {\n      // Not a Vaadin component field\n      return { customError: true };\n    }\n\n    const inputElement = this.#element.inputElement as FieldElement<string>;\n\n    if (this.#element.value === '') {\n      if (inputElement.value === '') {\n        return { valueMissing: true };\n      }\n      // Some value is entered, but not meaningful to the\n      // web component — assume parse error.\n      return { badInput: true };\n    }\n    // Unknown constraint violation\n    return { customError: true };\n  }\n}\n\nexport class VaadinFieldStrategy<T = any, E extends FieldElement<T> = FieldElement<T>> extends AbstractFieldStrategy<\n  T,\n  E\n> {\n  #invalid = false;\n  readonly #boundOnValidated = this.#onValidated.bind(this);\n  readonly #boundOnUnparsableChange = this.#onUnparsableChange.bind(this);\n\n  constructor(element: E, model?: AbstractModel<T>) {\n    super(element, model);\n    element.addEventListener('validated', this.#boundOnValidated);\n    element.addEventListener('unparsable-change', this.#boundOnUnparsableChange);\n  }\n\n  set required(value: boolean) {\n    this.element.required = value;\n  }\n\n  set invalid(value: boolean) {\n    this.#invalid = value;\n    this.element.invalid = value;\n  }\n\n  override set errorMessage(value: string) {\n    this.element.errorMessage = value;\n  }\n\n  override removeEventListeners(): void {\n    this.element.removeEventListener('validated', this.#boundOnValidated);\n    this.element.removeEventListener('unparsable-change', this.#boundOnUnparsableChange);\n  }\n\n  #onValidated(e: Event): void {\n    if (!(e instanceof CustomEvent) || typeof e.detail !== 'object') {\n      return;\n    }\n\n    // Override built-in changes of the `invalid` flag in Vaadin components\n    // to keep the `invalid` property state of the web component in sync.\n    const invalid = !((e.detail ?? {}) as Partial<ValidityState>).valid;\n    if (this.#invalid !== invalid) {\n      this.element.invalid = this.#invalid;\n    }\n\n    // Some user interactions in Vaadin components do not dispatch `input`\n    // event, such as validation upon closing the overlay, pressing Enter key.\n    // One notable example is <vaadin-date-picker>. Use `validated` event in\n    // addition to standard input events to handle those.\n    this.onInput?.call(this.element, e);\n  }\n\n  #onUnparsableChange(e: Event) {\n    this.onChange?.call(this.element, e);\n  }\n\n  override checkValidity(): boolean {\n    // Ignore the `invalid` property of the Vaadin component to avoid\n    // reading the component's internal old validation state and validate\n    // the element based on the current state.\n    const isElementInvalid = this.element.invalid;\n    this.element.invalid = false;\n    const valid = super.checkValidity();\n    this.element.invalid = isElementInvalid;\n    return valid;\n  }\n}\n\nexport class GenericFieldStrategy<T = any, E extends FieldElement<T> = FieldElement<T>> extends AbstractFieldStrategy<\n  T,\n  E\n> {\n  set required(value: boolean) {\n    this.setAttribute('required', value);\n  }\n\n  set invalid(value: boolean) {\n    this.setAttribute('invalid', value);\n  }\n}\n\ntype CheckedFieldElement<T> = FieldElement<T> & {\n  checked: boolean;\n};\n\nexport class CheckedFieldStrategy<\n  T = any,\n  E extends CheckedFieldElement<T> = CheckedFieldElement<T>,\n> extends GenericFieldStrategy<T, E> {\n  override get value(): T | undefined {\n    if (this.model instanceof BooleanModel) {\n      return this.element.checked as T;\n    }\n\n    return this.element.checked ? this.element.value : undefined;\n  }\n\n  override set value(val: T | undefined) {\n    (this.element as { checked: boolean }).checked = /^(true|on)$/iu.test(String(val));\n  }\n}\n\nexport class CheckedGroupFieldStrategy<\n  T = any,\n  E extends FieldElement<T> = FieldElement<T>,\n> extends GenericFieldStrategy<T, E> {\n  override get value(): T | undefined {\n    return super.value;\n  }\n\n  override set value(val: T | undefined) {\n    super.value = val ?? ([] as T);\n  }\n}\n\ntype ComboBoxFieldElement<T> = FieldElement<T> & {\n  value: string;\n  selectedItem: T | null;\n};\n\nexport class ComboBoxFieldStrategy<\n  T,\n  E extends ComboBoxFieldElement<T> = ComboBoxFieldElement<T>,\n> extends VaadinFieldStrategy<T, E> {\n  override get value(): T | undefined {\n    if (this.model && (this.model instanceof ObjectModel || this.model instanceof ArrayModel)) {\n      const { selectedItem } = this.element;\n      return selectedItem ?? undefined;\n    }\n\n    return super.value;\n  }\n\n  override set value(val: T | undefined) {\n    if (this.model instanceof ObjectModel || this.model instanceof ArrayModel) {\n      this.element.selectedItem = val ?? null;\n    } else {\n      super.value = val;\n    }\n  }\n}\n\nexport class VaadinStringFieldStrategy extends VaadinFieldStrategy<string> {\n  override get value(): string | undefined {\n    return super.value;\n  }\n\n  override set value(val: string | undefined) {\n    // Some Vaadin components (e.g. vaadin-time-picker) do not support setting\n    // the value to `null` or `undefined`. Instead, set it to an empty string.\n    super.value = val ?? '';\n  }\n}\nfunction isEmptyObject(val: any): boolean {\n  return val && typeof val === 'object' && !Array.isArray(val) && Object.keys(val).length === 0;\n}\n\nexport class VaadinDateTimeFieldStrategy<\n  T = string,\n  E extends FieldElement<T> = FieldElement<T>,\n> extends VaadinFieldStrategy<T, E> {\n  override get value(): T | undefined {\n    return super.value;\n  }\n\n  override set value(val: T | undefined) {\n    const timestamp = Date.parse(val as string);\n\n    if (!val || isEmptyObject(val) || Number.isNaN(timestamp)) {\n      super.value = '' as T;\n      return;\n    }\n\n    const date = new Date(timestamp);\n    // Convert to ISO 8601 local combined date and time representation\n    const tzOffsetMs = 60 * 1000 * date.getTimezoneOffset();\n    super.value = new Date(timestamp - tzOffsetMs).toISOString().slice(0, 19) as T;\n  }\n}\n\ntype MultiSelectComboBoxFieldElement<T> = FieldElement<T> & {\n  value: never;\n  selectedItems: T;\n};\n\nexport class MultiSelectComboBoxFieldStrategy<\n  T,\n  E extends MultiSelectComboBoxFieldElement<T> = MultiSelectComboBoxFieldElement<T>,\n> extends VaadinFieldStrategy<T, E> {\n  override get value(): T {\n    return this.element.selectedItems;\n  }\n\n  override set value(val: any) {\n    this.element.selectedItems = val;\n  }\n}\n\ntype SelectedFieldElement<T> = FieldElement<T> & {\n  value: never;\n  selected: T;\n};\n\nexport class SelectedFieldStrategy<\n  T,\n  E extends SelectedFieldElement<T> = SelectedFieldElement<T>,\n> extends GenericFieldStrategy<T, E> {\n  override get value(): T {\n    return this.element.selected;\n  }\n\n  override set value(val: T) {\n    this.element.selected = val;\n  }\n}\n\ntype MaybeVaadinElementConstructor = {\n  readonly version?: string;\n};\n\nexport function getDefaultFieldStrategy<T>(elm: FieldElement<T>, model?: AbstractModel<T>): AbstractFieldStrategy<T> {\n  switch (elm.localName) {\n    case 'vaadin-checkbox':\n    case 'vaadin-radio-button':\n      return new CheckedFieldStrategy(elm as CheckedFieldElement<T>, model);\n    case 'vaadin-checkbox-group':\n      return new CheckedGroupFieldStrategy(elm, model);\n    case 'vaadin-combo-box':\n      return new ComboBoxFieldStrategy(elm as ComboBoxFieldElement<T>, model);\n    case 'vaadin-list-box':\n      return new SelectedFieldStrategy(elm as SelectedFieldElement<T>, model);\n    case 'vaadin-multi-select-combo-box':\n      return new MultiSelectComboBoxFieldStrategy(elm as MultiSelectComboBoxFieldElement<T>, model);\n    case 'vaadin-rich-text-editor':\n      return new GenericFieldStrategy(elm, model);\n    case 'vaadin-time-picker':\n      return new VaadinStringFieldStrategy(\n        elm as FieldElement<string>,\n        model as AbstractModel<string>,\n      ) as AbstractFieldStrategy<T>;\n    case 'vaadin-date-time-picker':\n      return new VaadinDateTimeFieldStrategy(elm, model) as AbstractFieldStrategy<T>;\n    default:\n      if (elm.localName === 'input' && /^(checkbox|radio)$/u.test((elm as unknown as HTMLInputElement).type)) {\n        return new CheckedFieldStrategy(elm as CheckedFieldElement<T>, model);\n      }\n      if ((elm.constructor as unknown as MaybeVaadinElementConstructor).version) {\n        return new VaadinFieldStrategy(elm, model);\n      }\n      return new GenericFieldStrategy(elm, model);\n  }\n}\n\nfunction convertFieldValue<T extends AbstractModel>(model: T, fieldValue: unknown) {\n  return typeof fieldValue === 'string' && hasFromString(model) ? model[_fromString](fieldValue) : fieldValue;\n}\n\n/**\n * Binds a form field component into a model.\n *\n * Example usage:\n *\n * ```\n * <vaadin-text-field ...=\"${field(model.name)}\">\n * </vaadin-text-field>\n * ```\n */\nexport const field = directive(\n  class extends Directive {\n    fieldState?: FieldState<any>;\n\n    constructor(partInfo: PartInfo) {\n      super(partInfo);\n      if (partInfo.type !== PartType.PROPERTY && partInfo.type !== PartType.ELEMENT) {\n        throw new Error('Use as \"<element {field(...)}\" or <element ...={field(...)}\"');\n      }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    override render(_model: AbstractModel<any>, _effect?: (element: Element) => void) {\n      return nothing;\n    }\n\n    override update(part: ElementPart | PropertyPart, [model, effect]: DirectiveParameters<this>) {\n      const element = part.element as FieldElement & HTMLInputElement;\n\n      const binderNode = getBinderNode(model);\n\n      if (!this.fieldState) {\n        const fieldState = {\n          errorMessage: '',\n          name: '',\n          value: '',\n          required: false,\n          invalid: false,\n          model,\n          validity: defaultValidity,\n          element,\n          strategy: binderNode.binder.getFieldStrategy(element, model),\n        };\n\n        this.fieldState = fieldState;\n\n        const inputHandler = () => {\n          fieldState.strategy.checkValidity();\n          // When bad input is detected, skip reading new value in binder state\n          if (!fieldState.strategy.validity.badInput) {\n            fieldState.value = fieldState.strategy.value;\n          }\n          fieldState.validity = fieldState.strategy.validity;\n          binderNode[_validity] = fieldState.validity;\n          binderNode.value = convertFieldValue(model, fieldState.value);\n          if (effect !== undefined) {\n            effect.call(element, element);\n          }\n        };\n\n        fieldState.strategy.onInput = inputHandler;\n        fieldState.strategy.onChange = () => {\n          inputHandler();\n          void binderNode.validate();\n        };\n\n        const blurHandler = () => {\n          inputHandler();\n          void binderNode.validate();\n          binderNode.visited = true;\n        };\n\n        element.addEventListener('blur', blurHandler);\n      }\n\n      const { fieldState } = this;\n\n      if (fieldState.element !== element || fieldState.model !== model) {\n        const { onInput } = fieldState.strategy;\n        fieldState.strategy = binderNode.binder.getFieldStrategy(element, model);\n        fieldState.strategy.onInput = onInput;\n      }\n\n      const { name } = binderNode;\n      if (name !== fieldState.name) {\n        fieldState.name = name;\n        element.setAttribute('name', name);\n      }\n\n      const { value } = binderNode;\n      const valueFromField = convertFieldValue(model, fieldState.value);\n      if (value !== valueFromField && !(Number.isNaN(value) && Number.isNaN(valueFromField))) {\n        const nonNanValue = Number.isNaN(value) ? '' : value;\n        fieldState.value = nonNanValue;\n        fieldState.strategy.value = nonNanValue;\n      }\n\n      const { required } = binderNode;\n      if (required !== fieldState.required) {\n        fieldState.required = required;\n        fieldState.strategy.required = required;\n      }\n\n      const firstError: ValueError<any> | undefined = binderNode.ownErrors[0];\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const errorMessage = firstError?.message || '';\n      if (errorMessage !== fieldState.errorMessage) {\n        fieldState.errorMessage = errorMessage;\n        fieldState.strategy.errorMessage = errorMessage;\n      }\n\n      const { invalid } = binderNode;\n      if (invalid !== fieldState.invalid) {\n        fieldState.invalid = invalid;\n        fieldState.strategy.invalid = invalid;\n      }\n\n      return noChange;\n    }\n  },\n);\n"]}