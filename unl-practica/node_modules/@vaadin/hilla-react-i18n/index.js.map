{"mappings":"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","names":["options?: I18nOptions","#backend","#initialized","#language","#translations","#resolvedLanguage","#chunks","newLanguage: string","chunkName: string","newChunk?: string","translationsResult: TranslationsResult","#formatCache","key: string","params?: Record<string, unknown>","i18n: I18n"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/react-i18n/src/index.ts"],"sourcesContent":["import { batch, type ReadonlySignal, signal, type Signal } from '@vaadin/hilla-react-signals';\nimport { DefaultBackend, type I18nBackend } from './backend.js';\nimport { FormatCache } from './FormatCache.js';\nimport { getLanguageSettings, updateLanguageSettings } from './settings.js';\nimport type { I18nOptions, Translations, TranslationsResult } from './types.js';\n\ninterface VaadinGlobal {\n  Vaadin?: {\n    featureFlags?: {\n      hillaI18n?: boolean;\n    };\n  };\n}\n\nfunction determineInitialLanguage(options?: I18nOptions): string {\n  // Use explicitly configured language if defined\n  if (options?.language) {\n    return options.language;\n  }\n  // Use last used language as fallback\n  const settings = getLanguageSettings();\n  if (settings?.language) {\n    return settings.language;\n  }\n  // Otherwise use browser language\n  return navigator.language;\n}\n\nexport class I18n {\n  readonly #backend: I18nBackend = new DefaultBackend();\n\n  readonly #initialized: Signal<boolean> = signal(false);\n  readonly #language: Signal<string | undefined> = signal(undefined);\n  readonly #translations: Signal<Translations> = signal({});\n  readonly #resolvedLanguage: Signal<string | undefined> = signal(undefined);\n  readonly #chunks = new Set<string>();\n\n  #formatCache: FormatCache = new FormatCache(navigator.language);\n\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (!(globalThis as VaadinGlobal).Vaadin?.featureFlags?.hillaI18n) {\n      // Remove when removing feature flag\n      throw new Error(\n        `The Hilla I18n API is currently considered experimental and may change in the future. To use it you need to explicitly enable it in Copilot or by adding com.vaadin.experimental.hillaI18n=true to vaadin-featureflags.properties`,\n      );\n    }\n    // @ts-expect-error import.meta.hot does not have TS definitions\n    if (import.meta.hot) {\n      // @ts-expect-error import.meta.hot does not have TS definitions\n      // eslint-disable-next-line\n      import.meta.hot.on('translations-update', () => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.reloadTranslations();\n      });\n    }\n  }\n\n  /**\n   * Returns a signal indicating whether the I18n instance has been initialized.\n   * The instance is considered initialized after `configure` has been called\n   * and translations for the initial language have been loaded. Can be used to\n   * show a placeholder or loading indicator until the translations are ready.\n   *\n   * Subscribers to this signal will be notified when initialization is complete\n   * and translations are ready to be used.\n   */\n  get initialized(): ReadonlySignal<boolean> {\n    return this.#initialized;\n  }\n\n  /**\n   * Returns a signal with the currently configured language.\n   *\n   * Subscribers to this signal will be notified when the language has changed\n   * and new translations have been loaded.\n   */\n  get language(): ReadonlySignal<string | undefined> {\n    return this.#language;\n  }\n\n  /**\n   * Returns a signal with the resolved language. The resolved language is the\n   * language that was actually used to load translations. It may differ from\n   * the configured language if there are no translations available for the\n   * configured language. For example, when setting the language to \"de-DE\" but\n   * translations are only available for \"de\", the resolved language will be\n   * \"de\".\n   */\n  get resolvedLanguage(): ReadonlySignal<string | undefined> {\n    return this.#resolvedLanguage;\n  }\n\n  /**\n   * Initializes the I18n instance. This method should be called once to load\n   * translations for the initial language. The `translate` API will not return\n   * properly translated strings until the initializations has completed.\n   *\n   * The initialization runs asynchronously as translations are loaded from the\n   * backend. The method returns a promise that resolves when the translations\n   * have been loaded, after which the `translate` API can safely be used.\n   *\n   * The initial language is determined as follows:\n   * 1. If a user opens the app for the first time, the browser language is used.\n   * 2. If the language has been changed in a previous usage of the app using\n   * `setLanguage`, the last used language is used. The last used language is\n   * automatically stored in local storage.\n   *\n   * Alternatively, the initial language can be explicitly configured using the\n   * `language` option. The language should be a valid IETF BCP 47 language tag,\n   * such as `en` or `en-US`.\n   *\n   * @param options - Optional options object to specify the initial language.\n   */\n  async configure(options?: I18nOptions): Promise<void> {\n    const initialLanguage = determineInitialLanguage(options);\n    await this.updateLanguage(initialLanguage);\n  }\n\n  /**\n   * Changes the current language and loads translations for the new language.\n   * Components using the `translate` API will automatically re-render, and\n   * subscribers to the `language` signal will be notified, when the new\n   * translations have been loaded.\n   *\n   * The language should be a valid IETF BCP 47 language tag, such as `en` or\n   * `en-US`.\n   *\n   * If there is no translation file for that specific language tag, the backend\n   * will try to load the translation file for the parent language tag. For\n   * example, if there is no translation file for `en-US`, the backend will try\n   * to load the translation file for `en`. Otherwise, it will fall back to the\n   * default translation file `translations.properties`.\n   *\n   * Changing the language is an asynchronous operation. The method returns a\n   * promise that resolves when the translations for the new language have been\n   * loaded.\n   *\n   * @param newLanguage - a valid IETF BCP 47 language tag, such as `en` or `en-US`\n   */\n  async setLanguage(newLanguage: string): Promise<void> {\n    await this.updateLanguage(newLanguage, true);\n  }\n\n  /**\n   * Registers the chunk name for loading translations, and loads the\n   * translations for the specified chunk.\n   *\n   * @internal only for automatic internal calls from production JS bundles\n   *\n   * @param chunkName - the production JS bundle chunk name\n   */\n  async registerChunk(chunkName: string): Promise<void> {\n    if (this.#chunks.has(chunkName)) {\n      return;\n    }\n\n    this.#chunks.add(chunkName);\n\n    if (this.#language.value) {\n      await this.updateLanguage(this.#language.value, false, chunkName);\n    }\n  }\n\n  private async updateLanguage(newLanguage: string, updateSettings = false, newChunk?: string) {\n    if (this.#language.value === newLanguage && !newChunk) {\n      return;\n    }\n\n    const chunks = newChunk\n      ? [newChunk] // New chunk is registered, load only that\n      : this.#chunks.size > 0\n        ? [...this.#chunks.values()] // Load the new language for all chunks registered so far\n        : undefined; // Load the new language without specifying chunks, assuming dev. mode\n\n    let translationsResult: TranslationsResult;\n    try {\n      translationsResult = await this.#backend.loadTranslations(newLanguage, chunks);\n    } catch (e) {\n      console.error(`Failed to load translations for language: ${newLanguage}`, e);\n      return;\n    }\n\n    // Update all signals together to avoid triggering side effects multiple times\n    batch(() => {\n      this.#translations.value = newChunk\n        ? { ...this.#translations.value, ...translationsResult.translations }\n        : translationsResult.translations;\n      this.#language.value = newLanguage;\n      this.#resolvedLanguage.value = translationsResult.resolvedLanguage;\n      this.#formatCache = new FormatCache(newLanguage);\n      this.#initialized.value = true;\n\n      if (updateSettings) {\n        updateLanguageSettings({\n          language: newLanguage,\n        });\n      }\n    });\n  }\n\n  /**\n   * Reloads all translations for the current language. This method should only\n   * be used for HMR in development mode.\n   */\n  private async reloadTranslations() {\n    const currentLanguage = this.#language.value;\n    if (!currentLanguage) {\n      return;\n    }\n\n    let translationsResult: TranslationsResult;\n    try {\n      translationsResult = await this.#backend.loadTranslations(currentLanguage);\n    } catch (e) {\n      console.error(`Failed to reload translations for language: ${currentLanguage}`, e);\n      return;\n    }\n\n    // Update all signals together to avoid triggering side effects multiple times\n    batch(() => {\n      this.#translations.value = translationsResult.translations;\n      this.#resolvedLanguage.value = translationsResult.resolvedLanguage;\n      this.#formatCache = new FormatCache(currentLanguage);\n    });\n  }\n\n  /**\n   * Returns a translated string for the given translation key. The key should\n   * match a key in the loaded translations. If no translation is found for the\n   * key, the key itself is returned.\n   *\n   * Translations may contain placeholders, following the ICU MessageFormat\n   * syntax. They can be replaced by passing a `params` object with placeholder\n   * values, where keys correspond to the placeholder names and values are the\n   * replacement value. Values should be basic types such as strings, numbers,\n   * or dates that match the placeholder format configured in the translation\n   * string. For example, when using a placeholder `{count, number}`, the value\n   * should be a number, when using `{date, date}`, the value should be a Date\n   * object, and so on.\n   *\n   * This method internally accesses a signal, meaning that React components\n   * that use it will automatically re-render when translations change.\n   * Likewise, signal effects automatically subscribe to translation changes\n   * when calling this method.\n   *\n   * @param key - The translation key to translate\n   * @param params - Optional object with placeholder values\n   */\n  translate(key: string, params?: Record<string, unknown>): string {\n    const translation = this.#translations.value[key];\n    if (!translation) {\n      return key;\n    }\n    const format = this.#formatCache.getFormat(translation);\n    return format.format(params) as string;\n  }\n}\n\n/**\n * The global I18n instance that is used to initialize translations, change the\n * current language, and translate strings.\n */\nexport const i18n: I18n = new I18n();\n\n/**\n * Returns a translated string for the given translation key. The key should\n * match a key in the loaded translations. If no translation is found for the\n * key, the key itself is returned.\n *\n * Translations may contain placeholders, following the ICU MessageFormat\n * syntax. They can be replaced by passing a `params` object with placeholder\n * values, where keys correspond to the placeholder names and values are the\n * replacement value. Values should be basic types such as strings, numbers,\n * or dates that match the placeholder format configured in the translation\n * string. For example, when using a placeholder `{count, number}`, the value\n * should be a number, when using `{date, date}`, the value should be a Date\n * object, and so on.\n *\n * This method internally accesses a signal, meaning that React components\n * that use it will automatically re-render when translations change.\n * Likewise, signal effects automatically subscribe to translation changes\n * when calling this method.\n *\n * This function is a shorthand for `i18n.translate` of the global I18n instance.\n *\n * @param key - The translation key to translate\n * @param params - Optional object with placeholder values\n */ export function translate(key: string, params?: Record<string, unknown>): string {\n  return i18n.translate(key, params);\n}\n"],"version":3}