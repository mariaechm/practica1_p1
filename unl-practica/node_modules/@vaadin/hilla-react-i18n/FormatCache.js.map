{"mappings":"AAAA,SAAS,6CAA8C;AAEvD,OAAO,MAAM,YAAY;CACvB,AAASA;CACT,AAASC,WAAW,IAAI;CAExB,YAAYC,UAAkB;EAG5B,IAAIC,mBAA6B,CAAE;AACnC,MAAI;AACF,sBAAmB,KAAK,aAAa,mBAAmB,SAAS;EAClE,QAAO,CAAE;AACV,OAAKH,YAAY,iBAAiB,SAAS,IAAI,iBAAiB,KAAK,UAAU;CAChF;CAED,UAAUI,aAAwC;EAChD,IAAI,SAAS,KAAKH,SAAS,IAAI,YAAY;AAC3C,OAAK,QAAQ;AACX,YAAS,IAAI,kBAAkB,aAAa,KAAKD;AACjD,QAAKC,SAAS,IAAI,aAAa,OAAO;EACvC;AACD,SAAO;CACR;AACF","names":["#language","#formats","language: string","supportedLocales: string[]","translation: string"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/react-i18n/src/FormatCache.ts"],"sourcesContent":["import { IntlMessageFormat } from 'intl-messageformat';\n\nexport class FormatCache {\n  readonly #language: string;\n  readonly #formats = new Map<string, IntlMessageFormat>();\n\n  constructor(language: string) {\n    // Ensure that the language is supported by Intl.NumberFormat, which IntlMessageFormat uses internally\n    // Fall back to navigator.language if the given language is not supported\n    let supportedLocales: string[] = [];\n    try {\n      supportedLocales = Intl.NumberFormat.supportedLocalesOf(language);\n    } catch {}\n    this.#language = supportedLocales.length > 0 ? supportedLocales[0] : navigator.language;\n  }\n\n  getFormat(translation: string): IntlMessageFormat {\n    let format = this.#formats.get(translation);\n    if (!format) {\n      format = new IntlMessageFormat(translation, this.#language);\n      this.#formats.set(translation, format);\n    }\n    return format;\n  }\n}\n"],"version":3}