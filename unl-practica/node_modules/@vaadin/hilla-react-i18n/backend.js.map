{"mappings":"AAMA,OAAO,MAAM,eAAsC;CACjD,MAAM,iBAAiBA,UAAkBC,QAAyD;EAChG,MAAM,SAAS,IAAI,gBAAgB;GACjC,CAAC,OAAO,MAAO;GACf,CAAC,WAAW,QAAS;GACrB,GAAG,CAAC,UAAU,CAAE,GAAE,IAAI,CAAC,UAAU,CAAC,UAAU,KAAM,EAAC;EACpD;EACD,MAAM,WAAW,MAAM,OAAO,KAAK,OAAO,UAAU,CAAC,EAAE;AACvD,OAAK,SAAS,IAAI;AAChB,SAAM,IAAI,MAAM;EACjB;EACD,MAAM,kBAAkB,SAAS,QAAQ,IAAI,4BAA4B;EACzE,MAAMC,eAA6B,MAAM,SAAS,MAAM;AACxD,SAAO;GACL;GACA,kBAAkB,mBAAmB;EACtC;CACF;AACF","names":["language: string","chunks?: readonly string[]","translations: Translations"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/react-i18n/src/backend.ts"],"sourcesContent":["import type { Translations, TranslationsResult } from './types.js';\n\nexport interface I18nBackend {\n  loadTranslations(language: string, chunks?: readonly string[]): Promise<TranslationsResult>;\n}\n\nexport class DefaultBackend implements I18nBackend {\n  async loadTranslations(language: string, chunks?: readonly string[]): Promise<TranslationsResult> {\n    const params = new URLSearchParams([\n      ['v-r', 'i18n'],\n      ['langtag', language],\n      ...(chunks ?? []).map((chunk) => ['chunks', chunk]),\n    ]);\n    const response = await fetch(`./?${params.toString()}`);\n    if (!response.ok) {\n      throw new Error('Failed fetching translations.');\n    }\n    const retrievedLocale = response.headers.get('X-Vaadin-Retrieved-Locale');\n    const translations: Translations = await response.json();\n    return {\n      translations,\n      resolvedLanguage: retrievedLocale ?? undefined,\n    };\n  }\n}\n"],"version":3}