{"mappings":"AAAA,SAAS,yBAA0B;AACnC,SAAS,0BAA2B;AACpC,OAAO,oDAAqD;AAE5D,OAAO,2CAA4C;AAEnD,eAAe,MAAM,qBAAqB,OAAO;CAC/C,OAAgB,mBAAmB;CACnC,OAAgB,0BAA0B;CAE1C,aAAa,kBAAkBA,MAAgC;AAC7D,SAAQ,MAAM,aAAaC,0BAA0B,KAAK,GACtD,aAAa,0BACb,aAAa;CAClB;CAED,aAAaA,0BAA0BD,MAAiC;EACtE,MAAM,MAAM,MAAM,WAAW,QAAQ,GAAG,cAAc,KAAK,GAAG;AAE9D,MAAI;AACF,aAAU,OAAQ,MAAM,MAAM,EAAE,IAAI,GAAG,aAAa,wBAAwB,MAAM,IAAI;EACvF,QAAO;AACN,UAAO;EACR;CACF;CAID,IAAa,OAAe;AAC1B,SAAO,OAAO,KAAK;CACpB;CAED,MAAe,QAAQ,EAAE,WAAW,SAAwB,EAAiB;AAE3E,QAAM,aAAc,MAAM,aAAaC,0BAA0B,UAAU,GAAI;GAC7E,MAAM,aAAa,IAAI,gBAAgB,KAAK,YAAY,kBAAkB,MAAM,SAAS;AACzF,WAAQ,KAAK,WAAW;EACzB;CACF;AACF","names":["path?: string","#checkForCustomClientFile"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-plugin-client/src/index.ts"],"sourcesContent":["import { open } from 'fs/promises';\nimport { fileURLToPath } from 'url';\nimport Plugin from '@vaadin/hilla-generator-core/Plugin.js';\nimport type { SharedStorage } from '@vaadin/hilla-generator-core/SharedStorage.js';\nimport ClientProcessor from './ClientProcessor.js';\n\nexport default class ClientPlugin extends Plugin {\n  static readonly CLIENT_FILE_NAME = 'connect-client.default';\n  static readonly CUSTOM_CLIENT_FILE_NAME = '../connect-client';\n\n  static async getClientFileName(path?: string): Promise<string> {\n    return (await ClientPlugin.#checkForCustomClientFile(path))\n      ? ClientPlugin.CUSTOM_CLIENT_FILE_NAME\n      : ClientPlugin.CLIENT_FILE_NAME;\n  }\n\n  static async #checkForCustomClientFile(path?: string): Promise<boolean> {\n    const dir = path?.startsWith('file:') ? fileURLToPath(path) : path;\n\n    try {\n      return !!(dir && (await open(`${dir}/${ClientPlugin.CUSTOM_CLIENT_FILE_NAME}.ts`, 'r')));\n    } catch {\n      return false;\n    }\n  }\n\n  declare ['constructor']: typeof ClientPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  override async execute({ outputDir, sources }: SharedStorage): Promise<void> {\n    // the client file is created only if a custom client file is not found\n    if (!(outputDir && (await ClientPlugin.#checkForCustomClientFile(outputDir)))) {\n      const clientFile = new ClientProcessor(this.constructor.CLIENT_FILE_NAME, this).process();\n      sources.push(clientFile);\n    }\n  }\n}\n"],"version":3}