{"mappings":"AAAA,OAAO,oDAAqD;AAI5D,OAAO,+CAAgD;AACvD,SAAS,6CAA8C;AAEvD,OAAO,IAAK,8DAAL;AACL;AACA;;AACD;AAED,eAAe,MAAM,uBAAuB,OAAO;CACjD,OAAgB,4BAA4B;CAE5C,AAASA,QAAQ,IAAI;CAErB,IAAa,OAAe;AAC1B,SAAO,OAAO,KAAK;CACpB;CAED,MAAe,QAAQC,SAAuC;EAC5D,MAAM,sBAAsB,MAAM,KAAKC,kBAAkB,QAAQ;EACjE,MAAM,oBAAoB,KAAKC,iBAAiB,QAAQ;AAExD,sBAAoB,QAAQ,CAAC,SAAS,KAAKH,MAAM,IAAI,MAAM,yBAAyB,SAAS,CAAC;AAC9F,oBAAkB,QAAQ,CAAC,SAAS,KAAKA,MAAM,IAAI,MAAM,yBAAyB,OAAO,CAAC;AAE1F,UAAQ,QAAQ,KAAK,GAAG,qBAAqB,GAAG,kBAAkB;AAClE,UAAQ,cAAc,IAAI,KAAK,YAAY,2BAA2B,KAAKA,MAAM;CAClF;CAED,MAAME,kBAAkBD,SAAwD;AAC9E,OAAK,OAAO,MAAM,uBAAuB;EACzC,MAAM,YAAY,IAAI;AAEtB,SAAO,QAAQ,QAAQ,IAAI,MAAM,CAC9B,OAAO,CAAC,GAAG,SAAS,OAAO,SAAS,CACpC,QAAQ,CAAC,CAAC,MAAM,SAAS,KAAK;GAC7B,MAAM,GAAG,cAAc,mBAAmB,GAAG,KAAK,MAAM,IAAI;GAE5D,IAAIG;AAEJ,OAAI,UAAU,IAAI,aAAa,EAAE;AAC/B,cAAU,UAAU,IAAI,aAAa;GACtC,OAAM;AACL,cAAU,IAAI;AACd,cAAU,IAAI,cAAc,QAAQ;GACrC;AAED,WAAQ,IAAI,oBAAoB,SAAU;EAC3C,EAAC;EAEJ,MAAM,aAAa,MAAM,QAAQ,IAC/B,MAAM,KAAK,UAAU,SAAS,EAAE,OAAO,CAAC,cAAc,QAAQ,KAC5D,kBAAkB,OAAO,cAAc,SAAS,SAAS,KAAK,CAC/D,CACF;AAED,SAAO,QAAQ,IAAI,WAAW,IAAI,OAAO,cAAc,UAAU,SAAS,CAAC,CAAC;CAC7E;CAED,iBAAiBH,SAA+C;AAC9D,OAAK,OAAO,MAAM,sBAAsB;AAExC,SAAO,QAAQ,IAAI,YAAY,UAC3B,OAAO,QAAQ,QAAQ,IAAI,WAAW,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,UAAU,KACnE,IAAI,gBAAgB,MAAM,WAAW,SAAS,MAAM,SAAS,CAC9D,GACD,CAAE;CACP;AACF","names":["#tags","storage: SharedStorage","#processEndpoints","#processEntities","methods: Map<string, OpenAPIV3.PathItemObject>"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-plugin-backbone/src/index.ts"],"sourcesContent":["import Plugin from '@vaadin/hilla-generator-core/Plugin.js';\nimport type { SharedStorage } from '@vaadin/hilla-generator-core/SharedStorage.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { SourceFile } from 'typescript';\nimport EndpointProcessor from './EndpointProcessor.js';\nimport { EntityProcessor } from './EntityProcessor.js';\n\nexport enum BackbonePluginSourceType {\n  Endpoint = 'endpoint',\n  Entity = 'entity',\n}\n\nexport default class BackbonePlugin extends Plugin {\n  static readonly BACKBONE_PLUGIN_FILE_TAGS = 'BACKBONE_PLUGIN_FILE_TAGS';\n  declare ['constructor']: typeof BackbonePlugin;\n  readonly #tags = new WeakMap<SourceFile, BackbonePluginSourceType>();\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  override async execute(storage: SharedStorage): Promise<void> {\n    const endpointSourceFiles = await this.#processEndpoints(storage);\n    const entitySourceFiles = this.#processEntities(storage);\n\n    endpointSourceFiles.forEach((file) => this.#tags.set(file, BackbonePluginSourceType.Endpoint));\n    entitySourceFiles.forEach((file) => this.#tags.set(file, BackbonePluginSourceType.Entity));\n\n    storage.sources.push(...endpointSourceFiles, ...entitySourceFiles);\n    storage.pluginStorage.set(this.constructor.BACKBONE_PLUGIN_FILE_TAGS, this.#tags);\n  }\n\n  async #processEndpoints(storage: SharedStorage): Promise<readonly SourceFile[]> {\n    this.logger.debug('Processing endpoints');\n    const endpoints = new Map<string, Map<string, OpenAPIV3.PathItemObject>>();\n\n    Object.entries(storage.api.paths)\n      .filter(([, pathItem]) => !!pathItem)\n      .forEach(([path, pathItem]) => {\n        const [, endpointName, endpointMethodName] = path.split('/');\n\n        let methods: Map<string, OpenAPIV3.PathItemObject>;\n\n        if (endpoints.has(endpointName)) {\n          methods = endpoints.get(endpointName)!;\n        } else {\n          methods = new Map();\n          endpoints.set(endpointName, methods);\n        }\n\n        methods.set(endpointMethodName, pathItem!);\n      });\n\n    const processors = await Promise.all(\n      Array.from(endpoints.entries(), async ([endpointName, methods]) =>\n        EndpointProcessor.create(endpointName, methods, storage, this),\n      ),\n    );\n\n    return Promise.all(processors.map(async (processor) => processor.process()));\n  }\n\n  #processEntities(storage: SharedStorage): readonly SourceFile[] {\n    this.logger.debug('Processing entities');\n\n    return storage.api.components?.schemas\n      ? Object.entries(storage.api.components.schemas).map(([name, component]) =>\n          new EntityProcessor(name, component, storage, this).process(),\n        )\n      : [];\n  }\n}\n"],"version":3}