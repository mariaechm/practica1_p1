import Plugin from "@vaadin/hilla-generator-core/Plugin.js";
import EndpointProcessor from "./EndpointProcessor.js";
import { EntityProcessor } from "./EntityProcessor.js";
export let BackbonePluginSourceType = function(BackbonePluginSourceType) {
	BackbonePluginSourceType["Endpoint"] = "endpoint";
	BackbonePluginSourceType["Entity"] = "entity";
	return BackbonePluginSourceType;
}({});
export default class BackbonePlugin extends Plugin {
	static BACKBONE_PLUGIN_FILE_TAGS = "BACKBONE_PLUGIN_FILE_TAGS";
	#tags = new WeakMap();
	get path() {
		return import.meta.url;
	}
	async execute(storage) {
		const endpointSourceFiles = await this.#processEndpoints(storage);
		const entitySourceFiles = this.#processEntities(storage);
		endpointSourceFiles.forEach((file) => this.#tags.set(file, BackbonePluginSourceType.Endpoint));
		entitySourceFiles.forEach((file) => this.#tags.set(file, BackbonePluginSourceType.Entity));
		storage.sources.push(...endpointSourceFiles, ...entitySourceFiles);
		storage.pluginStorage.set(this.constructor.BACKBONE_PLUGIN_FILE_TAGS, this.#tags);
	}
	async #processEndpoints(storage) {
		this.logger.debug("Processing endpoints");
		const endpoints = new Map();
		Object.entries(storage.api.paths).filter(([, pathItem]) => !!pathItem).forEach(([path, pathItem]) => {
			const [, endpointName, endpointMethodName] = path.split("/");
			let methods;
			if (endpoints.has(endpointName)) {
				methods = endpoints.get(endpointName);
			} else {
				methods = new Map();
				endpoints.set(endpointName, methods);
			}
			methods.set(endpointMethodName, pathItem);
		});
		const processors = await Promise.all(Array.from(endpoints.entries(), async ([endpointName, methods]) => EndpointProcessor.create(endpointName, methods, storage, this)));
		return Promise.all(processors.map(async (processor) => processor.process()));
	}
	#processEntities(storage) {
		this.logger.debug("Processing entities");
		return storage.api.components?.schemas ? Object.entries(storage.api.components.schemas).map(([name, component]) => new EntityProcessor(name, component, storage, this).process()) : [];
	}
}
//# sourceMappingURL=./index.js.map