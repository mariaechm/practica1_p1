{"mappings":"AAAA,SACE,yEAG8C;AAEhD,OAAO,MAAM,mBAAmB;AAMhC,OAAO,SAAS,0BAA0BA,QAAmD;AAC3F,QAAO,sBAAsB;AAC9B;AAED,OAAO,SAAS,2BAA2BA,QAAoD;AAC7F,QAAO,uBAAuB;AAC/B;AAED,OAAO,SAAS,yBAAyBA,QAAkD;AACzF,QAAO,qBAAqB;AAC7B;AAED,OAAO,SAAS,kBAAkBA,QAAqD;AACrF,KAAI,0BAA0B,OAAO,EAAE;AACrC,SAAO,OAAO;CACf;AAGD,KAAI,0BAA0B,OAAO,EAAE;AACrC,SAAO,OAAO,MAAM,KAAK,0BAA0B,GAAG;CACvD;AAED,QAAO;AACR;AAED,OAAO,SAAS,mBAAmBA,QAA+C;AAChF,KAAI,2BAA2B,OAAO,EAAE;AACtC,SAAO,OAAO;CACf;AAED,QAAO;AACR;AAED,OAAO,SAAS,iBAAiBA,QAAoC;AACnE,KAAI,yBAAyB,OAAO,EAAE;AACpC,SAAO,OAAO;CACf;AAED,QAAO;AACR","names":["schema: Schema"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-plugin-backbone/src/utils.ts"],"sourcesContent":["import {\n  isAnyOfRuleComposedSchema,\n  type AllOfRuleComposedSchema,\n  type Schema,\n} from '@vaadin/hilla-generator-core/Schema.js';\n\nexport const defaultMediaType = 'application/json';\n\nexport type SchemaWithTypeArguments = Readonly<{ 'x-type-arguments': AllOfRuleComposedSchema }> & Schema;\nexport type SchemaWithTypeParameters = Readonly<{ 'x-type-parameters': Schema[] }> & Schema;\nexport type SchemaWithTypeVariable = Readonly<{ 'x-type-variable': string }> & Schema;\n\nexport function isSchemaWithTypeArguments(schema: Schema): schema is SchemaWithTypeArguments {\n  return 'x-type-arguments' in schema;\n}\n\nexport function isSchemaWithTypeParameters(schema: Schema): schema is SchemaWithTypeParameters {\n  return 'x-type-parameters' in schema;\n}\n\nexport function isSchemaWithTypeVariable(schema: Schema): schema is SchemaWithTypeVariable {\n  return 'x-type-variable' in schema;\n}\n\nexport function findTypeArguments(schema: Schema): AllOfRuleComposedSchema | undefined {\n  if (isSchemaWithTypeArguments(schema)) {\n    return schema['x-type-arguments'];\n  }\n\n  // Type arguments are defined as part of anyOf schemas\n  if (isAnyOfRuleComposedSchema(schema)) {\n    return schema.anyOf.find(isSchemaWithTypeArguments)?.['x-type-arguments'];\n  }\n\n  return undefined;\n}\n\nexport function findTypeParameters(schema: Schema): readonly Schema[] | undefined {\n  if (isSchemaWithTypeParameters(schema)) {\n    return schema['x-type-parameters'];\n  }\n\n  return undefined;\n}\n\nexport function findTypeVariable(schema: Schema): string | undefined {\n  if (isSchemaWithTypeVariable(schema)) {\n    return schema['x-type-variable'];\n  }\n\n  return undefined;\n}\n"],"version":3}