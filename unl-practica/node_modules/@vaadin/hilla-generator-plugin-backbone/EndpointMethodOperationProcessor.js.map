{"mappings":"AAGA,OAAO,yDAA0D;AAEjE,OAAO,4BAA6B;AACpC,SAAS,gCAAiC;AAC1C,OAAO,oBAAyE;AAChF,OAAO,iFAAkF;AACzF,OAAO,2EAA4E;AAInF,eAAe,MAAe,iCAAiC;CAE7D,OAAO,gBACLA,YACAC,cACAC,oBACAC,WACAC,cACAC,eACAC,OAC8C;AAC9C,UAAQ,YAAR;GACE,KAAK,UAAU,YAAY,MAAM;AAE/B,WAAO,IAAI,qCACT,cACA,oBACA,WACA,cACA,eACA;GAEH;GACD;AACE,UAAM,OAAO,MAAM,aAAa,WAAW,aAAa,CAAC,6BAA6B;AACtF,WAAO;EACV;CACF;AAGF;AAED,MAAM,6CAA6C,iCAAiC;CAClF,AAASC;CACT,AAASC;CACT,AAASC;CACT,AAASC;CACT,AAASC;CACT,AAASC;CAGT,YACEX,cACAC,oBACAC,WACAC,cACAC,eACAC,OACA;AACA,SAAO;AACP,OAAKM,SAAS;AACd,OAAKL,gBAAgB;AACrB,OAAKG,gBAAgB;AACrB,OAAKD,sBAAsB;AAC3B,OAAKE,aAAa;AAClB,OAAKH,iBAAiB;CACvB;CAED,MAAM,QAAQK,WAAoD;EAChE,MAAM,EAAE,SAAS,SAAS,OAAO,GAAG,KAAKN;AACzC,OAAKK,OAAO,OAAO,OAAO,EAAE,KAAKF,cAAc,GAAG,KAAKD,oBAAoB,2BAA2B;EAEtG,MAAM,EAAE,WAAW,kBAAkB,YAAY,GAAG,IAAI,mCACtD,KAAKE,WAAW,aAChB,KAAKJ,eACL,KAAKC,gBACL,KAAKI,QACL,SAAS;EAEX,MAAM,mBAAmB,QAAQ,MAAM,IAAI,KAAKH,oBAAoB;EACpE,MAAM,sBAAsB,QAAQ,QAAQ,cAC1C,MAAM,mBAAmB,MAAM,aAAa,kBAAkB,UAAU,CAAC,CAC1E;EAED,MAAM,iBAAiB,GAAG,QAAQ,qBAChC,GAAG,QAAQ,+BAA+B,qBAAqB,GAAG,QAAQ,iBAAiB,OAAO,CAAC,EACnG,WACA;GACE,GAAG,QAAQ,oBAAoB,KAAKC,cAAc;GAClD,GAAG,QAAQ,oBAAoB,KAAKD,oBAAoB;GACxD;GACA;EACD,EAAC,OAAO,QAAQ,CAClB;EAED,MAAM,eAAe,KAAKK,sBAAsB;AAEhD,SAAO,GAAG,QAAQ,0BAChB,CAAC,GAAG,QAAQ,YAAY,GAAG,WAAW,aAAa,AAAC,GACpD,WACA,kBACA,WACA,YACA,GAAG,QAAQ,wBAAwB,WAAW,CAAC,YAAa,EAAC,EAC7D,GAAG,QAAQ,YAAY,CAAC,GAAG,QAAQ,sBAAsB,eAAe,AAAC,EAAC,CAC3E;CACF;CAED,uBAAiC;AAC/B,OAAKF,OAAO,OAAO,OAAO,EAAE,KAAKF,cAAc,GAAG,KAAKD,oBAAoB,kCAAkC;EAE7G,MAAM,gBAAgB,OAAO,QAAQ,KAAKE,WAAW,UAAU,CAC5D,QAAQ,CAAC,CAAC,MAAM,SAAS,KACxB,IAAI,gCACF,MACA,UACA,KAAKJ,eACL,KAAKC,gBACL,KAAKI,QACL,SAAS,CACZ,CACA,OAAO,CAAC,OAAO,OAAO,QAAQ,IAAI,UAAU,CAAC,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,MAAM;AAEjF,MAAI,cAAc,WAAW,GAAG;AAC9B,UAAO,GAAG,QAAQ,sBAAsB,GAAG,WAAW,YAAY;EACnE;AAED,SAAO,GAAG,QAAQ,oBAAoB,cAAc;CACrD;AACF","names":["httpMethod: OpenAPIV3.HttpMethods","endpointName: string","endpointMethodName: string","operation: EndpointMethodOperation","dependencies: DependencyManager","transferTypes: TransferTypes","owner: Plugin","#dependencies","#transferTypes","#endpointMethodName","#endpointName","#operation","#owner","outputDir?: string","#prepareResponseType"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-plugin-backbone/src/EndpointMethodOperationProcessor.ts"],"sourcesContent":["/* eslint-disable max-params */\nimport type Plugin from '@vaadin/hilla-generator-core/Plugin.js';\nimport type { TransferTypes } from '@vaadin/hilla-generator-core/SharedStorage.js';\nimport ClientPlugin from '@vaadin/hilla-generator-plugin-client';\nimport type DependencyManager from '@vaadin/hilla-generator-utils/dependencies/DependencyManager.js';\nimport equal from 'fast-deep-equal';\nimport { OpenAPIV3 } from 'openapi-types';\nimport ts, { type Expression, type Statement, type TypeNode } from 'typescript';\nimport EndpointMethodRequestBodyProcessor from './EndpointMethodRequestBodyProcessor.js';\nimport EndpointMethodResponseProcessor from './EndpointMethodResponseProcessor.js';\n\nexport type EndpointMethodOperation = OpenAPIV3.OperationObject;\n\nexport default abstract class EndpointMethodOperationProcessor {\n  // eslint-disable-next-line @typescript-eslint/max-params\n  static createProcessor(\n    httpMethod: OpenAPIV3.HttpMethods,\n    endpointName: string,\n    endpointMethodName: string,\n    operation: EndpointMethodOperation,\n    dependencies: DependencyManager,\n    transferTypes: TransferTypes,\n    owner: Plugin,\n  ): EndpointMethodOperationProcessor | undefined {\n    switch (httpMethod) {\n      case OpenAPIV3.HttpMethods.POST: {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new EndpointMethodOperationPOSTProcessor(\n          endpointName,\n          endpointMethodName,\n          operation,\n          dependencies,\n          transferTypes,\n          owner,\n        );\n      }\n      default:\n        owner.logger.warn(`Processing ${httpMethod.toUpperCase()} currently is not supported`);\n        return undefined;\n    }\n  }\n\n  abstract process(outputDir?: string): Promise<Statement | undefined>;\n}\n\nclass EndpointMethodOperationPOSTProcessor extends EndpointMethodOperationProcessor {\n  readonly #dependencies: DependencyManager;\n  readonly #transferTypes: TransferTypes;\n  readonly #endpointMethodName: string;\n  readonly #endpointName: string;\n  readonly #operation: EndpointMethodOperation;\n  readonly #owner: Plugin;\n\n  // eslint-disable-next-line @typescript-eslint/max-params\n  constructor(\n    endpointName: string,\n    endpointMethodName: string,\n    operation: EndpointMethodOperation,\n    dependencies: DependencyManager,\n    transferTypes: TransferTypes,\n    owner: Plugin,\n  ) {\n    super();\n    this.#owner = owner;\n    this.#dependencies = dependencies;\n    this.#endpointName = endpointName;\n    this.#endpointMethodName = endpointMethodName;\n    this.#operation = operation;\n    this.#transferTypes = transferTypes;\n  }\n\n  async process(outputDir?: string): Promise<Statement | undefined> {\n    const { exports, imports, paths } = this.#dependencies;\n    this.#owner.logger.debug(`${this.#endpointName}.${this.#endpointMethodName} - processing POST method`);\n\n    const { initParam, packedParameters, parameters } = new EndpointMethodRequestBodyProcessor(\n      this.#operation.requestBody,\n      this.#dependencies,\n      this.#transferTypes,\n      this.#owner,\n    ).process();\n\n    const methodIdentifier = exports.named.add(this.#endpointMethodName);\n    const clientLibIdentifier = imports.default.getIdentifier(\n      paths.createRelativePath(await ClientPlugin.getClientFileName(outputDir)),\n    )!;\n\n    const callExpression = ts.factory.createCallExpression(\n      ts.factory.createPropertyAccessExpression(clientLibIdentifier, ts.factory.createIdentifier('call')),\n      undefined,\n      [\n        ts.factory.createStringLiteral(this.#endpointName),\n        ts.factory.createStringLiteral(this.#endpointMethodName),\n        packedParameters,\n        initParam,\n      ].filter(Boolean) as readonly Expression[],\n    );\n\n    const responseType = this.#prepareResponseType();\n\n    return ts.factory.createFunctionDeclaration(\n      [ts.factory.createToken(ts.SyntaxKind.AsyncKeyword)],\n      undefined,\n      methodIdentifier,\n      undefined,\n      parameters,\n      ts.factory.createTypeReferenceNode('Promise', [responseType]),\n      ts.factory.createBlock([ts.factory.createReturnStatement(callExpression)]),\n    );\n  }\n\n  #prepareResponseType(): TypeNode {\n    this.#owner.logger.debug(`${this.#endpointName}.${this.#endpointMethodName} POST - processing response type`);\n\n    const responseTypes = Object.entries(this.#operation.responses)\n      .flatMap(([code, response]) =>\n        new EndpointMethodResponseProcessor(\n          code,\n          response,\n          this.#dependencies,\n          this.#transferTypes,\n          this.#owner,\n        ).process(),\n      )\n      .filter((value, index, arr) => arr.findIndex((v) => equal(v, value)) === index);\n\n    if (responseTypes.length === 0) {\n      return ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword);\n    }\n\n    return ts.factory.createUnionTypeNode(responseTypes);\n  }\n}\n"],"version":3}