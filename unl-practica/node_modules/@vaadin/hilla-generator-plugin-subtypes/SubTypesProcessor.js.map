{"mappings":"AAAA,SAAS,2BAA4B;AACrC,SACE,8BACA,mCAEA,0EAC8C;AAChD,OAAO,yEAA0E;AACjF,OAAO,wFAAyF;AAChG,OAAO,4EAA6E;AACpF,OAAO,oBAA0C;AAEjD,OAAO,MAAM,kBAAkB;CAC7B,AAASA;CACT,AAASC;CACT,AAASC;CACT,AAASC;CAET,YAAYC,UAAkBC,QAAoBC,OAAmC;AACnF,OAAKN,YAAY;AACjB,OAAKC,UAAU;AACf,OAAKC,SAAS;AACd,OAAKC,gBAAgB,IAAI,kBACvB,IAAI,YAAY;GAAE,WAAW;GAAO,YAAY,QAAQ,OAAO,SAAS;EAAE;CAE7E;CAED,UAAsB;EACpB,MAAM,EAAE,SAAS,SAAS,OAAO,GAAG,KAAKA;EAGzC,MAAM,WAAW,KAAKD,OAAO,IAAI,CAAC,WAAW;GAC3C,MAAM,OAAO,MAAM,mBAAmB,6BAA6B,OAAO,CAAC;GAC3E,MAAM,UAAU,kCAAkC,OAAO;AACzD,UAAO,QAAQ,QAAQ,IAAI,MAAM,SAAS,KAAK;EAChD,EAAC;EAGF,MAAM,QAAQ,GAAG,QAAQ,oBACvB,SAAS,IAAI,CAAC,YAAY,GAAG,QAAQ,wBAAwB,QAAQ,CAAC,CACvE;EAGD,MAAM,EAAE,UAAU,YAAY,GAAG,KAAKD;EACtC,MAAM,iBAAiB,EAAE,2BAA2B,KAAKD,UAAU,CAAC;EACpE,MAAM,kBAAkB,GAAG,QAAQ,iBAAiB,cAAc;EAClE,MAAM,YAAY,GAAG,QAAQ,2BAA2B,WAAW,iBAAiB,WAAW,MAAM;AAErG,UAAQ,QAAQ,IAAI,cAAc;AAElC,SAAO,iBAAiB;GAAC,GAAG,QAAQ,QAAQ;GAAE,GAAG;GAAY;GAAW,GAAG,QAAQ,QAAQ;EAAC,GAAE,SAAS;CACxG;AACF","names":["#typeName","#source","#oneOf","#dependencies","typeName: string","source: SourceFile","oneOf: readonly ReferenceSchema[]"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-plugin-subtypes/src/SubTypesProcessor.ts"],"sourcesContent":["import { dirname } from 'path/posix';\nimport {\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  type ReferenceSchema,\n  simplifyFullyQualifiedName,\n} from '@vaadin/hilla-generator-core/Schema.js';\nimport createSourceFile from '@vaadin/hilla-generator-utils/createSourceFile.js';\nimport DependencyManager from '@vaadin/hilla-generator-utils/dependencies/DependencyManager.js';\nimport PathManager from '@vaadin/hilla-generator-utils/dependencies/PathManager.js';\nimport ts, { type SourceFile } from 'typescript';\n\nexport class SubTypesProcessor {\n  readonly #typeName: string;\n  readonly #source: SourceFile;\n  readonly #oneOf: readonly ReferenceSchema[];\n  readonly #dependencies: DependencyManager;\n\n  constructor(typeName: string, source: SourceFile, oneOf: readonly ReferenceSchema[]) {\n    this.#typeName = typeName;\n    this.#source = source;\n    this.#oneOf = oneOf;\n    this.#dependencies = new DependencyManager(\n      new PathManager({ extension: '.js', relativeTo: dirname(source.fileName) }),\n    );\n  }\n\n  process(): SourceFile {\n    const { exports, imports, paths } = this.#dependencies;\n\n    // import all subtypes and return them\n    const subTypes = this.#oneOf.map((schema) => {\n      const path = paths.createRelativePath(convertReferenceSchemaToPath(schema));\n      const subType = convertReferenceSchemaToSpecifier(schema);\n      return imports.default.add(path, subType, true);\n    });\n\n    // create a union type from the subtypes\n    const union = ts.factory.createUnionTypeNode(\n      subTypes.map((subType) => ts.factory.createTypeReferenceNode(subType)),\n    );\n\n    // create the statement\n    const { fileName, statements } = this.#source;\n    const unionTypeName = `${simplifyFullyQualifiedName(this.#typeName)}`;\n    const unionIdentifier = ts.factory.createIdentifier(unionTypeName);\n    const statement = ts.factory.createTypeAliasDeclaration(undefined, unionIdentifier, undefined, union);\n\n    exports.default.set(unionTypeName);\n\n    return createSourceFile([...imports.toCode(), ...statements, statement, ...exports.toCode()], fileName);\n  }\n}\n"],"version":3}