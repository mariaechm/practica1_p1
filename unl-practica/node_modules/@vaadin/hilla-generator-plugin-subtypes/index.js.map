{"mappings":"AAAA,OAAO,oDAAqD;AAC5D,SAAS,mBAAmB,uFAAwF;AAEpH,SAAS,iDAAkD;AAC3D,SAAS,iDAAkD;AAC3D,SAAS,+CAAgD;AAEzD,eAAe,MAAM,uBAAuB,OAAO;CAGjD,IAAa,OAAe;AAC1B,SAAO,OAAO,KAAK;CACpB;CAGD,MAAe,QAAQA,SAAuC;EAC5D,MAAM,EAAE,KAAK,SAAS,GAAG;EAEzB,MAAM,aAAa,IAAI,YAAY;AAEnC,OAAK,YAAY;AACf;EACD;AAED,SAAO,QAAQ,WAAW,CAAC,QAAQ,CAAC,CAAC,SAAS,cAAc,KAAK;AAE/D,OACE,WAAW,iBACX,MAAM,QAAQ,cAAc,MAAM,IAClC,cAAc,MAAM,MAAM,CAAC,WAAW,kBAAkB,OAAO,CAAC,EAChE;IACA,MAAM,MAAM,EAAE,wCAAwC,QAAQ,CAAC;IAC/D,MAAM,SAAS,QAAQ,KAAK,CAAC,EAAE,UAAU,KAAK,aAAa,GAAG;IAE9D,MAAM,YAAY,IAAI,kBAAkB,SAAS,QAAQ,cAAc,OAAO,SAAS;AACvF,YAAQ,OAAO,QAAQ,QAAQ,OAAO,EAAE,GAAG,UAAU;AAGrD,kBAAc,MAAM,QAAQ,CAAC,WAAW;AACtC,SAAI,UAAU,QAAQ;MACpB,MAAM,OAAO,OAAO;AACpB,aAAO,QAAQ,WAAW,CAAC,QAAQ,CAAC,CAAC,QAAQ,aAAa,KAAK;AAC7D,WAAI,WAAW,gBAAgB,WAAW,KAAK,UAAU,wBAAwB,OAAO,EAAE;AACxF,qBAAa,OAAO,QAAQ,CAAC,MAAM;AACjC,aAAI,gBAAgB,KAAK,WAAW,EAAE,cAAe,aAAa,EAAE,WAAW,UAAU;UACvF,MAAM,YAAY,EAAE,WAAW,SAAS;UACxC,MAAM,SAAS,EAAE,wCAAwC,OAAO,CAAC;UACjE,MAAM,YAAY,QAAQ,KAAK,CAAC,EAAE,UAAU,KAAK,aAAa,MAAM;UAEpE,MAAM,cAAc,IAAI,iBAAiB,WAAW,WAAW,SAAS;AACxE,kBAAQ,OAAO,QAAQ,QAAQ,UAAU,EAAE,GAAG,YAAY;UAG1D,MAAM,WAAW,EAAE,wCAAwC,OAAO,CAAC;UACnE,MAAM,cAAc,QAAQ,KAAK,CAAC,EAAE,UAAU,KAAK,aAAa,QAAQ;UACxE,MAAM,mBAAmB,IAAI,kBAAkB,aAAa,SAAS;AACrE,kBAAQ,OAAO,QAAQ,QAAQ,YAAY,EAAE,GAAG,iBAAiB;SAClE;QACF,EAAC;OACH;MACF,EAAC;KACH;IACF,EAAC;IAGF,MAAM,WAAW,EAAE,wCAAwC,QAAQ,CAAC;IACpE,MAAM,cAAc,QAAQ,KAAK,CAAC,EAAE,UAAU,KAAK,aAAa,QAAQ;AACxE,YAAQ,OAAO,QAAQ,QAAQ,YAAY,EAAE,EAAE;GAChD;EACF,EAAC;CACH;AACF","names":["storage: SharedStorage"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-plugin-subtypes/src/index.ts"],"sourcesContent":["import Plugin from '@vaadin/hilla-generator-core/Plugin.js';\nimport { isReferenceSchema, convertFullyQualifiedNameToRelativePath } from '@vaadin/hilla-generator-core/Schema.js';\nimport type { SharedStorage } from '@vaadin/hilla-generator-core/SharedStorage.js';\nimport { ModelFixProcessor } from './ModelFixProcessor.js';\nimport { SubTypesProcessor } from './SubTypesProcessor.js';\nimport { TypeFixProcessor } from './TypeFixProcessor.js';\n\nexport default class SubTypesPlugin extends Plugin {\n  declare ['constructor']: typeof SubTypesPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async execute(storage: SharedStorage): Promise<void> {\n    const { api, sources } = storage;\n\n    const components = api.components?.schemas;\n\n    if (!components) {\n      return;\n    }\n\n    Object.entries(components).forEach(([baseKey, baseComponent]) => {\n      // search for components with oneOf: those are union types\n      if (\n        'oneOf' in baseComponent &&\n        Array.isArray(baseComponent.oneOf) &&\n        baseComponent.oneOf.every((schema) => isReferenceSchema(schema))\n      ) {\n        const fn = `${convertFullyQualifiedNameToRelativePath(baseKey)}.ts`;\n        const source = sources.find(({ fileName }) => fileName === fn)!;\n        // replace the (empty) source with a newly-generated one\n        const newSource = new SubTypesProcessor(baseKey, source, baseComponent.oneOf).process();\n        sources.splice(sources.indexOf(source), 1, newSource);\n\n        // mentioned types in the oneOf need to be fixed as well\n        baseComponent.oneOf.forEach((schema) => {\n          if ('$ref' in schema) {\n            const path = schema.$ref;\n            Object.entries(components).forEach(([subKey, subComponent]) => {\n              if ('anyOf' in subComponent && subKey === path.substring('#/components/schemas/'.length)) {\n                subComponent.anyOf?.forEach((s) => {\n                  if ('properties' in s && '@type' in s.properties! && 'example' in s.properties['@type']) {\n                    const typeValue = s.properties['@type'].example as string;\n                    const subFn = `${convertFullyQualifiedNameToRelativePath(subKey)}.ts`;\n                    const subSource = sources.find(({ fileName }) => fileName === subFn)!;\n                    // fix the source to replace the @type property name with a quoted string\n                    const fixedSource = new TypeFixProcessor(subSource, typeValue).process();\n                    sources.splice(sources.indexOf(subSource), 1, fixedSource);\n\n                    // fix the model to remove the @type property\n                    const modelFn = `${convertFullyQualifiedNameToRelativePath(subKey)}Model.ts`;\n                    const modelSource = sources.find(({ fileName }) => fileName === modelFn)!;\n                    const fixedModelSource = new ModelFixProcessor(modelSource).process();\n                    sources.splice(sources.indexOf(modelSource), 1, fixedModelSource);\n                  }\n                });\n              }\n            });\n          }\n        });\n\n        // remove the union type model file\n        const unionFn = `${convertFullyQualifiedNameToRelativePath(baseKey)}Model.ts`;\n        const unionSource = sources.find(({ fileName }) => fileName === unionFn)!;\n        sources.splice(sources.indexOf(unionSource), 1);\n      }\n    });\n  }\n}\n"],"version":3}