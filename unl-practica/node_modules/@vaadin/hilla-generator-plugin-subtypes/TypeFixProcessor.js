import createSourceFile from "@vaadin/hilla-generator-utils/createSourceFile.js";
import ts from "typescript";
import { propertyNameToString } from "./utils.js";
export class TypeFixProcessor {
	#source;
	#typeValue;
	constructor(source, typeValue) {
		this.#source = source;
		this.#typeValue = typeValue;
	}
	process() {
		const statements = this.#source.statements.map((statement) => {
			if (ts.isInterfaceDeclaration(statement)) {
				const members = statement.members.map((member) => {
					if (ts.isPropertySignature(member) && propertyNameToString(member.name) === "@type") {
						return ts.factory.createPropertySignature(undefined, ts.factory.createStringLiteral("@type"), undefined, ts.factory.createLiteralTypeNode(ts.factory.createStringLiteral(this.#typeValue)));
					}
					return member;
				});
				return ts.factory.createInterfaceDeclaration(statement.modifiers, statement.name, statement.typeParameters, statement.heritageClauses, members);
			}
			return statement;
		});
		return createSourceFile(statements, this.#source.fileName);
	}
}
//# sourceMappingURL=./TypeFixProcessor.js.map