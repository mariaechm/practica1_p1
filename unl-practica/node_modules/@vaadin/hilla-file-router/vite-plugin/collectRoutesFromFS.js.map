{"mappings":"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","names":["url: URL | undefined","logger: Logger","dir: URL","children: RouteMeta[]","layout: URL | undefined"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/file-router/src/vite-plugin/collectRoutesFromFS.ts"],"sourcesContent":["import { opendir, readFile } from 'node:fs/promises';\nimport { basename, extname, relative } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport type { Logger } from 'vite';\nimport { RouteParamType } from '../shared/routeParamType.js';\nimport { cleanUp, routeParamTypeMap } from './utils.js';\n\nexport type RouteMeta = Readonly<{\n  path: string;\n  file?: URL;\n  layout?: URL;\n  flowLayout?: boolean;\n  children?: readonly RouteMeta[];\n}>;\n\n/**\n * Routes collector options.\n */\nexport type CollectRoutesOptions = Readonly<{\n  /**\n   * The list of extensions for files that will be collected as routes.\n   */\n  extensions: readonly string[];\n  /**\n   * The parent directory of the current directory. This is a\n   * nested parameter used inside the function only.\n   */\n  parent?: URL;\n  /**\n   * The Vite logger instance.\n   */\n  logger: Logger;\n}>;\n\nasync function checkFile(url: URL | undefined, logger: Logger): Promise<URL | undefined> {\n  if (url) {\n    const contents = await readFile(url, 'utf-8');\n    if (contents.trim() === '') {\n      return undefined;\n    } else if (!contents.includes('export default')) {\n      logger.error(`The file \"${String(url)}\" should contain a default export of a component`);\n      return undefined;\n    }\n  }\n\n  return url;\n}\n\nconst collator = new Intl.Collator('en-US');\n\nconst warningFor = ['.ts', '.js'];\n\n/**\n * Collect route metadata from the file system and build a route tree.\n *\n * It accepts files that start with `@` as special files.\n * - `@layout` contains a component that wraps the child components.\n * - `@index` contains a component that will be used as the index page of the directory.\n *\n * It accepts files that start with `_` as private files. They will be ignored.\n *\n * @param dir - The directory to collect routes from.\n * @param options - The options object.\n *\n * @returns The route metadata array.\n */\nexport default async function collectRoutesFromFS(\n  dir: URL,\n  { extensions, logger, parent = dir }: CollectRoutesOptions,\n): Promise<readonly RouteMeta[]> {\n  const path = relative(fileURLToPath(parent), fileURLToPath(dir));\n  let children: RouteMeta[] = [];\n  let layout: URL | undefined;\n\n  for await (const d of await opendir(dir)) {\n    if (d.name.startsWith('_')) {\n      continue;\n    }\n\n    const extension = extname(d.name);\n    const name = basename(d.name, extension);\n\n    if (extension !== '' && !extensions.includes(extension)) {\n      if (warningFor.includes(extension)) {\n        logger.warn(\n          `File System based router expects only JSX files in 'Frontend/views/' directory, such as '*.tsx' and '*.jsx'. The file '${d.name}' will be ignored by router, as it doesn't match this convention. Please consider storing it in another directory.`,\n        );\n      }\n      continue;\n    }\n\n    if (children.some(({ path: p }) => p === name)) {\n      throw new Error(`You cannot create a file and a directory with the same name (\"${name}\"). Use \"@index\" instead`);\n    }\n\n    if (d.isDirectory()) {\n      const directoryRoutes = await collectRoutesFromFS(new URL(`${name}/`, dir), {\n        extensions,\n        logger,\n        parent: dir,\n      });\n      if (directoryRoutes.length === 1 && directoryRoutes[0].layout) {\n        const [layoutRoute] = directoryRoutes;\n        children.push(layoutRoute);\n      } else if (directoryRoutes.length > 0) {\n        children.push({ path: name, children: directoryRoutes });\n      }\n      continue;\n    }\n\n    const file = new URL(d.name, dir);\n    const url = await checkFile(file, logger);\n    if (url === undefined) {\n      continue;\n    }\n    const optionalParamType = routeParamTypeMap.get(RouteParamType.Optional)!;\n\n    if (\n      (name === '@index' && children.some(({ path: p }) => p.search(optionalParamType) >= 0)) ||\n      (name.search(optionalParamType) >= 0 && children.some(({ path: p }) => p === ''))\n    ) {\n      throw new Error('You cannot create an `@index` file in a directory with optional parameters');\n    } else if (name === '@layout') {\n      layout = file;\n    } else if (name === '@index') {\n      children.push({\n        path: '',\n        file,\n      });\n    } else if (name.startsWith('@')) {\n      throw new Error(\n        'Symbol \"@\" is reserved for special directories and files; only \"@layout\" and \"@index\" are allowed',\n      );\n    } else {\n      children.push({\n        path: name,\n        file,\n      });\n    }\n  }\n\n  [children, layout] = await Promise.all([\n    Promise.all(\n      children.map(async (child) => ({\n        ...child,\n        file: child.file,\n        layout: await checkFile(child.layout, logger),\n      })),\n    ),\n    checkFile(layout, logger),\n  ]);\n\n  children = children.sort(({ path: a }, { path: b }) => collator.compare(cleanUp(a), cleanUp(b)));\n\n  // If a layout was found, wrap the other routes with the layout route.\n  return layout ? [{ path, layout, children }] : children;\n}\n"],"version":3}