{"mappings":"AAAA,SAAS,kCAAmC;AAC5C,SAAS,MAAM,iCAAkC;AACjD,SAAS,iDAAkD;AAU3D,SAAS,MAAMA,MAAc;AAC3B,QAAO,KAAK,QAAQ,iBAAiB,KAAK;AAC3C;;;;;;;;AASD,eAAe,eAAe,aAC5BC,WACAC,aAC+B;AAC/B,KAAI;EACF,MAAM,iBAAiB,MAAM,SAAS,aAAa,QAAQ;EAC3D,MAAMC,mBAA0C,KAAK,MAAM,eAAe;EAC1E,MAAM,cAAc,iBAAiB,IAAI,CAAC,WAAW,MAAM,OAAO,KAAK,CAAC;AAExE,SAAO,cACL,WACA,EAAE,MAAM,GAAI,GACZ,CAAC,OAAO,MAAM,QACZ,MAAM,IAAI,CAAC,SAAS;GAClB,MAAM,cAAc,KAAK,IAAI,MAAM,MAAM,KAAK,KAAK,CAAC;GACpD,MAAM,WAAW,KAAK,WAAW,KAAK,KAAK,UAAU,EAAE,MAAM,YAAa,EAAC,GAAG;AAE9E,UAAO,YAAY,KAAK,CAAC,UAAU,SAAS,MAAM,YAAY,CAAC,WAAW,KAAK,CAAC,GAC5E;IAAE,GAAG;IAAM,YAAY;IAAM;GAAU,IACvC;IAAE,GAAG;IAAM;GAAU;EAC1B,EAAC,CACL;CACF,SAAQC,GAAY;AACnB,MAAI,aAAa,SAAS,UAAU,KAAK,EAAE,SAAS,UAAU;AAC5D,UAAO;EACR;AAED,QAAM;CACP;AACF","names":["path: string","routeMeta: readonly RouteMeta[]","layoutsFile: URL","availableLayouts: readonly LayoutMeta[]","e: unknown"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/file-router/src/vite-plugin/applyLayouts.ts"],"sourcesContent":["import { readFile } from 'node:fs/promises';\nimport { join, relative } from 'node:path/posix';\nimport { transformTree } from '../shared/transformTree.js';\nimport type { RouteMeta } from './collectRoutesFromFS.js';\n\n/**\n * The information about a particular server-side layout.\n */\nexport type LayoutMeta = Readonly<{\n  path: string;\n}>;\n\nfunction strip(path: string) {\n  return path.replace(/^\\/*(.+)\\/*$/u, '$1');\n}\n\n/**\n * Enables Flow layout flag on the matching routes based on the information from the layouts JSON file.\n *\n * @param routeMeta - The routes tree to process.\n * @param layoutsFile - The server layouts JSON file.\n * @returns Processed routes tree.\n */\nexport default async function applyLayouts(\n  routeMeta: readonly RouteMeta[],\n  layoutsFile: URL,\n): Promise<readonly RouteMeta[]> {\n  try {\n    const layoutContents = await readFile(layoutsFile, 'utf-8');\n    const availableLayouts: readonly LayoutMeta[] = JSON.parse(layoutContents);\n    const layoutPaths = availableLayouts.map((layout) => strip(layout.path));\n\n    return transformTree<readonly RouteMeta[], readonly RouteMeta[], { path: string }>(\n      routeMeta,\n      { path: '' },\n      (metas, next, ctx) =>\n        metas.map((meta) => {\n          const currentPath = join(ctx.path, strip(meta.path));\n          const children = meta.children ? next(meta.children, { path: currentPath }) : undefined;\n\n          return layoutPaths.some((path) => !relative(path, currentPath).startsWith('..'))\n            ? { ...meta, flowLayout: true, children }\n            : { ...meta, children };\n        }),\n    );\n  } catch (e: unknown) {\n    if (e instanceof Error && 'code' in e && e.code === 'ENOENT') {\n      return routeMeta;\n    }\n\n    throw e;\n  }\n}\n"],"version":3}