{"mappings":"AAAA,SAAS,kCAAmC;AAC5C,SAAS,uBAAwB;AACjC,OAAO,oBAAoC;AAC3C,SAAS,6EAA8E;AAEvF,SAAS,iDAAkD;AAG3D,SAAS,yCAAyC,oDAAqD;;;;;;AAOvG,UAAU,QAAQA,MAA6B;AAC7C,OAAM;AAEN,MAAK,MAAM,SAAS,KAAK,aAAa,EAAE;AACtC,SAAO,QAAQ,MAAM;CACtB;AACF;;;;;;;AAQD,eAAe,eAAe,qBAAqBC,OAA8C;CAC/F,MAAM,MAAM,MAAM,cAChB,OACA,MACA,OAAO,QAAQ,SACb,MAAM,QAAQ,IACZ,OAAO,IAAI,OAAO,EAAE,MAAM,MAAM,QAAQ,UAAU,YAAY,KAAK;EACjE,MAAM,cAAc,WAAW,MAAM,KAAK,SAAS,GAAG;AAEtD,OAAK,SAAS,QAAQ;AACpB,UAAO;IACL,OAAO,wCAAwC,KAAK;IACpD,QAAQ,iCAAiC,KAAK;IAC9C,UAAU;GACX;EACF;EAED,MAAM,aAAa,GAAG,iBACpB,QACA,MAAM,SAAS,QAAQ,QAAS,OAAO,EACvC,GAAG,aAAa,QAChB,KACD;EACD,IAAIC;EACJ,IAAI,uBAAuB;EAC3B,IAAIC;AAEJ,OAAK,MAAM,QAAQ,QAAQ,WAAW,EAAE;AACtC,OAAI,GAAG,sBAAsB,KAAK,IAAI,GAAG,aAAa,KAAK,KAAK,IAAI,KAAK,KAAK,SAAS,UAAU;AAC/F,QAAI,KAAK,eAAe,GAAG,0BAA0B,KAAK,YAAY,EAAE;KACtE,MAAM,OAAO,KAAK,YAAY,QAAQ,WAAW;KACjD,MAAM,SAAS,IAAI,QAAQ,GAAG,KAAK;AACnC,cAAS,OAAO,kBAAkB;AAClC,SAAI,OAAO,eAAe,WAAW;MACnC,MAAM,OAAO,KAAK,MAAM,KAAK,UAAU,OAAO,CAAC;AAE/C,WAAK,aAAa,cAAc;AAChC,eAAS;KACV;IACF;GACF,WAAU,KAAK,QAAQ,WAAW,CAAC,WAAW,iBAAiB,EAAE;AAChE,2BAAuB;GACxB,WAAU,wBAAwB,GAAG,aAAa,KAAK,EAAE;AACxD,oBAAgB,KAAK;AACrB,2BAAuB;GACxB;EACF;AAED,aAAW,EAAE,YAAY,cAAc,MAAO;EAE9C,IAAIC;AAEJ,MAAI,OAAO,OAAO;AAChB,IAAC,CAAE,MAAO,GAAG;EACd,OAAM;AACL,QAAK,eAAe;AAClB,UAAM,IAAI,OACP,YAAY,OAAO,QAAQ,OAAQ,CAAC;GAExC;AAED,WAAQ,4BAA4B,cAAc;EACnD;AAED,SAAO;GACL,OAAO,wCAAwC,KAAK;GACpD,GAAG;GACH,QAAQ,iCAAiC,OAAO,SAAS,KAAK;GAC9D;GACA,UAAU,gBAAgB,SAAS,CAAE,IAAG;EACzC;CACF,EAAC,CACH,CACJ;AAED,QAAO,KAAK,UAAU,KAAK,WAAW,EAAE;AACzC","names":["node: Node","views: readonly RouteMeta[]","config: ViewConfig | undefined","componentName: string | undefined","title: string"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/file-router/src/vite-plugin/createViewConfigJson.ts"],"sourcesContent":["import { readFile } from 'node:fs/promises';\nimport { Script } from 'node:vm';\nimport ts, { type Node } from 'typescript';\nimport { convertComponentNameToTitle } from '../shared/convertComponentNameToTitle.js';\nimport type { ServerViewConfig } from '../shared/internal.js';\nimport { transformTree } from '../shared/transformTree.js';\nimport type { ViewConfig } from '../types.js';\nimport type { RouteMeta } from './collectRoutesFromFS.js';\nimport { convertFSRouteSegmentToURLPatternFormat, extractParameterFromRouteSegment } from './utils.js';\n\n/**\n * Walks the TypeScript AST using the deep-first search algorithm.\n *\n * @param node - The node to walk.\n */\nfunction* walkAST(node: Node): Generator<Node> {\n  yield node;\n\n  for (const child of node.getChildren()) {\n    yield* walkAST(child);\n  }\n}\n\n/**\n * Creates a map of all leaf routes to their configuration. This file is used by the server to provide server-side\n * routes along with managing the client-side routes.\n *\n * @param views - The route metadata tree.\n */\nexport default async function createViewConfigJson(views: readonly RouteMeta[]): Promise<string> {\n  const res = await transformTree<readonly RouteMeta[], Promise<readonly ServerViewConfig[]>>(\n    views,\n    null,\n    async (routes, next) =>\n      await Promise.all(\n        routes.map(async ({ path, file, layout, children, flowLayout }) => {\n          const newChildren = children ? await next(children) : undefined;\n\n          if (!file && !layout) {\n            return {\n              route: convertFSRouteSegmentToURLPatternFormat(path),\n              params: extractParameterFromRouteSegment(path),\n              children: newChildren,\n            } satisfies ServerViewConfig;\n          }\n\n          const sourceFile = ts.createSourceFile(\n            'f.ts',\n            await readFile(file ?? layout!, 'utf8'),\n            ts.ScriptTarget.ESNext,\n            true,\n          );\n          let config: ViewConfig | undefined;\n          let waitingForIdentifier = false;\n          let componentName: string | undefined;\n\n          for (const node of walkAST(sourceFile)) {\n            if (ts.isVariableDeclaration(node) && ts.isIdentifier(node.name) && node.name.text === 'config') {\n              if (node.initializer && ts.isObjectLiteralExpression(node.initializer)) {\n                const code = node.initializer.getText(sourceFile);\n                const script = new Script(`(${code})`);\n                config = script.runInThisContext() as ViewConfig;\n                if (config.flowLayout === undefined) {\n                  const copy = JSON.parse(JSON.stringify(config));\n                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                  copy.flowLayout = flowLayout ?? false;\n                  config = copy;\n                }\n              }\n            } else if (node.getText(sourceFile).startsWith('export default')) {\n              waitingForIdentifier = true;\n            } else if (waitingForIdentifier && ts.isIdentifier(node)) {\n              componentName = node.text;\n              waitingForIdentifier = false;\n            }\n          }\n\n          config ??= { flowLayout: flowLayout ?? false };\n\n          let title: string;\n\n          if (config.title) {\n            ({ title } = config);\n          } else {\n            if (!componentName) {\n              throw new Error(\n                `The file \"${String(file ?? layout!)}\" must contain a default export of a component whose name will be used as title by default`,\n              );\n            }\n\n            title = convertComponentNameToTitle(componentName);\n          }\n\n          return {\n            route: convertFSRouteSegmentToURLPatternFormat(path),\n            ...config,\n            params: extractParameterFromRouteSegment(config.route ?? path),\n            title,\n            children: newChildren ?? (layout ? [] : undefined),\n          } satisfies ServerViewConfig;\n        }),\n      ),\n  );\n\n  return JSON.stringify(res, undefined, 2);\n}\n"],"version":3}