{"mappings":"AAAA,SAAS,OAAO,UAAU,mCAAoC;AAE9D,OAAO,qCAAsC;AAC7C,OAAO,mDAAwE;AAC/E,OAAO,qDAAsD;AAC7D,OAAO,qDAAsD;;;;;;;;;;;AA+B7D,eAAe,oBAAoBA,KAAUC,MAAcC,YAAwC;AACjG,OAAM,MAAM,IAAI,IAAI,MAAM,MAAM,EAAE,WAAW,KAAM,EAAC;CACpD,IAAI,cAAc,cAAc;AAChC,MAAK,YAAY;EACf,IAAIC;AACJ,MAAI;AACF,cAAW,MAAM,SAAS,KAAK,QAAQ;EACxC,SAAQC,GAAY;AACnB,SAAM,KAAK,eAAe,MAAM,YAAY,UAAU,KAAK,EAAE,SAAS,WAAW;AAC/E,UAAM;GACP;EACF;AACD,gBAAc,aAAa;CAC5B;AACD,KAAI,aAAa;AACf,QAAM,UAAU,KAAK,MAAM,QAAQ;CACpC;AAED,QAAO;AACR;;;;;;;;;;AAYD,OAAO,eAAe,qBACpBC,UACAC,MACAC,YACAC,QACAC,OACe;CACf,IAAIC;AACJ,KAAI;AACF,cAAY,MAAM,oBAAoB,UAAU;GAAE;GAAY;EAAQ,EAAC;CACxE,SAAQN,GAAY;AACnB,MAAI,aAAa,SAAS,UAAU,KAAK,EAAE,SAAS,UAAU;AAC5D,eAAY,CAAE;EACf,OAAM;AACL,SAAM;EACP;CACF;AAED,KAAI,OAAO;AACT,SAAO,KAAK,8BAA8B;CAC3C;AACD,aAAY,MAAM,aAAa,WAAW,KAAK,QAAQ;CACvD,MAAM,oBAAoB,qBAAqB,WAAW,KAAK;CAC/D,MAAM,iBAAiB,MAAM,qBAAqB,UAAU;CAE5D,MAAM,cAAc,MAAM,oBAAoB,KAAK,MAAM,eAAe;AACxE,KAAI,OAAO;AACT,SAAO,MAAM,oCAAoC,OAAO,KAAK,KAAK,CAAC,EAAE;CACtE;AAID,OAAM,oBAAoB,KAAK,MAAM,mBAAmB,YAAY;AACpE,KAAI,OAAO;AACT,SAAO,MAAM,kCAAkC,OAAO,KAAK,KAAK,CAAC,EAAE;CACpE;AACF","names":["url: URL","data: string","forceWrite?: boolean","contents: string | undefined","e: unknown","viewsDir: URL","urls: RuntimeFileUrls","extensions: readonly string[]","logger: Logger","debug: boolean","routeMeta: readonly RouteMeta[]"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/file-router/src/vite-plugin/generateRuntimeFiles.ts"],"sourcesContent":["import { mkdir, readFile, writeFile } from 'node:fs/promises';\nimport type { Logger } from 'vite';\nimport applyLayouts from './applyLayouts.js';\nimport collectRoutesFromFS, { type RouteMeta } from './collectRoutesFromFS.js';\nimport createRoutesFromMeta from './createRoutesFromMeta.js';\nimport createViewConfigJson from './createViewConfigJson.js';\n\n/**\n * The URLs of the files to generate.\n */\nexport type RuntimeFileUrls = Readonly<{\n  /**\n   * The URL of the JSON file with the leaf routes and their metadata. This file\n   * will be processed by the server to provide the final route configuration.\n   */\n  json: URL;\n  /**\n   * The URL of the module with the routes tree in a framework-agnostic format.\n   */\n  code: URL;\n  /**\n   * The URL of the JSON file containing server layout path information.\n   */\n  layouts: URL;\n}>;\n\n/**\n * Generates a file conditionally. If the file already exists and its content is the same as the\n * given data, the file will not be overwritten. It is useful to avoid unnecessary server\n * reboot during development.\n *\n * @param url - The URL of the file to generate.\n * @param data - The data to write to the file.\n * @param forceWrite - true to force writing the file even if there are no changes\n * @returns true if the file was written, false otherwise.\n */\nasync function generateRuntimeFile(url: URL, data: string, forceWrite?: boolean): Promise<boolean> {\n  await mkdir(new URL('./', url), { recursive: true });\n  let shouldWrite = forceWrite ?? false;\n  if (!forceWrite) {\n    let contents: string | undefined;\n    try {\n      contents = await readFile(url, 'utf-8');\n    } catch (e: unknown) {\n      if (!(e != null && typeof e === 'object' && 'code' in e && e.code === 'ENOENT')) {\n        throw e;\n      }\n    }\n    shouldWrite = contents !== data;\n  }\n  if (shouldWrite) {\n    await writeFile(url, data, 'utf-8');\n  }\n\n  return shouldWrite;\n}\n\n/**\n * Collects all file-based routes from the given directory, and based on them generates two files\n * described by {@link RuntimeFileUrls} type.\n * @param viewsDir - The directory that contains file-based routes (views).\n * @param urls - The URLs of the files to generate.\n * @param extensions - The list of extensions that will be collected as routes.\n * @param logger - The Vite logger instance.\n * @param debug - true to debug\n */\n// eslint-disable-next-line @typescript-eslint/max-params\nexport async function generateRuntimeFiles(\n  viewsDir: URL,\n  urls: RuntimeFileUrls,\n  extensions: readonly string[],\n  logger: Logger,\n  debug: boolean,\n): Promise<void> {\n  let routeMeta: readonly RouteMeta[];\n  try {\n    routeMeta = await collectRoutesFromFS(viewsDir, { extensions, logger });\n  } catch (e: unknown) {\n    if (e instanceof Error && 'code' in e && e.code === 'ENOENT') {\n      routeMeta = [];\n    } else {\n      throw e;\n    }\n  }\n\n  if (debug) {\n    logger.info('Collected file-based routes');\n  }\n  routeMeta = await applyLayouts(routeMeta, urls.layouts);\n  const runtimeRoutesCode = createRoutesFromMeta(routeMeta, urls);\n  const viewConfigJson = await createViewConfigJson(routeMeta);\n\n  const jsonWritten = await generateRuntimeFile(urls.json, viewConfigJson);\n  if (debug) {\n    logger.info(`Frontend route list is generated: ${String(urls.json)}`);\n  }\n  // If the metadata has changed, we need to write the TS file also to make Vite HMR updates work properly.\n  // Even though the contents of the TS file does not change, the contents of the files imported in the TS\n  // files changes and the routes must be re-applied to the React router\n  await generateRuntimeFile(urls.code, runtimeRoutesCode, jsonWritten);\n  if (debug) {\n    logger.info(`File Route module is generated: ${String(urls.code)}`);\n  }\n}\n"],"version":3}