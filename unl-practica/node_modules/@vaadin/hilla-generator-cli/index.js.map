{"mappings":"AAAA,OAAO,0DAA2D;AAClE,OAAO,mEAAoE;AAC3E,OAAO,gBAAiB;AACxB,OAAO,mCAAoC;AAC3C,SAAS,gCAAiC;AAE1C,MAAM,EACJ,OAAO,EAAE,WAAW,QAAQ,SAAS,SAAS,EAC9C,OAAO,CAAC,MAAM,EACf,GAAG,MACD;;;;;;;;;;;;GAaD;CACE,OAAO;EACL,WAAW;GACT,SAAS;GACT,WAAW;GACX,MAAM;EACP;EACD,QAAQ;GACN,SAAS,CAAE;GACX,YAAY;GACZ,WAAW;GACX,MAAM;EACP;EACD,SAAS;GACP,WAAW;GACX,MAAM;EACP;CACF;CACD,YAAY,OAAO;AACpB,EACF;AAED,MAAM,SAAS,IAAI,cAAc,EAAE,QAAS;AAE5C,MAAM,KAAK,IAAI,YAAY,WAAW;AAEtC,MAAM,kBAAkB,MAAM,QAAQ,IACpC,MAAM,KAAK,IAAI,IAAI,UAAU,OAAO,eAAe,GAAG,WAAW,WAAW,CAAC,CAC9E;AACD,MAAM,YAAY,IAAI,UAAU,iBAAiB;CAAE;CAAQ;AAAW;AAEtE,MAAM,QAAQ,MAAM,UAAU,QAAQ,MAAM,aAAa,IAAI,MAAM,CAAC;AACpE,MAAM,gBAAgB,MAAM,GAAG,mBAAmB;AAClD,MAAM,iBAAiB,MAAM,GAAG,oBAAoB,MAAM;AAE1D,MAAM,GAAG,eAAe,gBAAgB,cAAc","names":[],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/generator-cli/src/index.ts"],"sourcesContent":["import Generator from '@vaadin/hilla-generator-core/Generator.js';\nimport LoggerFactory from '@vaadin/hilla-generator-utils/LoggerFactory.js';\nimport meow from 'meow';\nimport GeneratorIO from './GeneratorIO.js';\nimport { processInput } from './utils.js';\n\nconst {\n  flags: { outputDir, plugin: plugins, verbose },\n  input: [input],\n} = meow(\n  `\nUsage:\n  tsgen\n    (will read JSON from stdin)\n  tsgen <OpenAPI JSON string>\n  tsgen <OpenAPI file path>\n\nOptions:\n  -h, --help             Show this screen\n  -o, --output-dir       Output directory\n  -p, --plugin <path>    Use the plugin loadable by <path>.\n  --version              Show the app version\n`,\n  {\n    flags: {\n      outputDir: {\n        default: 'frontend/generated',\n        shortFlag: 'o',\n        type: 'string',\n      },\n      plugin: {\n        default: [],\n        isMultiple: true,\n        shortFlag: 'p',\n        type: 'string',\n      },\n      verbose: {\n        shortFlag: 'v',\n        type: 'boolean',\n      },\n    },\n    importMeta: import.meta,\n  },\n);\n\nconst logger = new LoggerFactory({ verbose });\n\nconst io = new GeneratorIO(outputDir, logger);\n\nconst resolvedPlugins = await Promise.all(\n  Array.from(new Set(plugins), async (pluginPath) => io.loadPlugin(pluginPath)),\n);\nconst generator = new Generator(resolvedPlugins, { logger, outputDir });\n\nconst files = await generator.process(await processInput(io, input));\nconst filesToDelete = await io.getGeneratedFiles();\nconst generatedFiles = await io.writeGeneratedFiles(files);\n\nawait io.cleanOutputDir(generatedFiles, filesToDelete);\n"],"version":3}