{"mappings":";;;;AAIA,OAAO,MAAM,sBAAsB,MAAM;;;;;CAKvC;;;;CAIA;;;;;;CAOA,YAAYA,SAAiBC,MAAeC,QAAkB;AAC5D,QAAM,QAAQ;AACd,OAAK,OAAO;AACZ,OAAK,SAAS;CACf;AACF;;;;;;AAOD,OAAO,MAAM,gCAAgC,cAAc;;;;CAIzD;;;;CAIA;;;;;;CAOA,YAAYF,SAAiBG,qBAA4CF,MAAe;AACtF,QAAM,SAAS,MAAM,oBAAoB;AACzC,OAAK,yBAAyB;AAC9B,OAAK,SAAS;AACd,OAAK,sBAAsB;CAC5B;AACF;;;;AAKD,OAAO,MAAM,8BAA8B,cAAc;;;;CAIvD;;;;;CAMA,YAAYD,SAAiBI,UAAoB;AAC/C,QAAM,SAAS,yBAAyB,SAAS;AACjD,OAAK,WAAW;CACjB;;;;CAKD,IAAI,SAAiB;AACnB,SAAO,KAAK,SAAS;CACtB;AACF;AAED,OAAO,MAAM,kCAAkC,sBAAsB;CACnE,YAAYJ,SAAiBI,UAAoB;AAC/C,QAAM,SAAS,SAAS;AACxB,OAAK,OAAO;CACb;AACF;AAED,OAAO,MAAM,+BAA+B,sBAAsB;CAChE,YAAYJ,SAAiBI,UAAoB;AAC/C,QAAM,SAAS,SAAS;AACxB,OAAK,OAAO;CACb;AACF;;;;AAKD,OAAO,MAAM,oBAAoB;;;;CAI/B;;;;CAKA;;;;CAKA;;;;;;CAOA,YAAYJ,SAAiBK,eAAwBC,kBAA2B;AAC9E,OAAK,UAAU;AACf,OAAK,gBAAgB;AACrB,OAAK,mBAAmB;CACzB;AACF","names":["message: string","type?: string","detail?: unknown","validationErrorData: ValidationErrorData[]","response: Response","parameterName?: string","validatorMessage?: string"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/EndpointErrors.ts"],"sourcesContent":["/**\n * An exception that gets thrown when the Vaadin backend responds\n * with not ok status.\n */\nexport class EndpointError extends Error {\n  /**\n   * The optional detail object, containing additional information sent\n   * from the backend\n   */\n  detail?: unknown;\n  /**\n   * The optional name of the exception that was thrown on a backend\n   */\n  type?: string;\n\n  /**\n   * @param message - the `message` property value\n   * @param type - the `type` property value\n   * @param detail - the `detail` property value\n   */\n  constructor(message: string, type?: string, detail?: unknown) {\n    super(message);\n    this.type = type;\n    this.detail = detail;\n  }\n}\n\n/**\n * An exception that gets thrown if Vaadin endpoint responds\n * with non-ok status and provides additional info\n * on the validation errors occurred.\n */\nexport class EndpointValidationError extends EndpointError {\n  /**\n   * An array of the validation errors.\n   */\n  validationErrorData: ValidationErrorData[];\n  /**\n   * An original validation error message.\n   */\n  validationErrorMessage: string;\n\n  /**\n   * @param message - the `message` property value\n   * @param validationErrorData - the `validationErrorData` property value\n   * @param type - the `type` property value\n   */\n  constructor(message: string, validationErrorData: ValidationErrorData[], type?: string) {\n    super(message, type, validationErrorData);\n    this.validationErrorMessage = message;\n    this.detail = null;\n    this.validationErrorData = validationErrorData;\n  }\n}\n\n/**\n * An exception that gets thrown for unexpected HTTP response.\n */\nexport class EndpointResponseError extends EndpointError {\n  /**\n   * The optional response object, containing the HTTP response error\n   */\n  response: Response;\n\n  /**\n   * @param message - the `message` property value\n   * @param response - the `response` property value\n   */\n  constructor(message: string, response: Response) {\n    super(message, 'EndpointResponseError', response);\n    this.response = response;\n  }\n\n  /**\n   * Convenience property to get the HTTP code status directly\n   */\n  get status(): number {\n    return this.response.status;\n  }\n}\n\nexport class UnauthorizedResponseError extends EndpointResponseError {\n  constructor(message: string, response: Response) {\n    super(message, response);\n    this.type = 'UnauthorizedResponseError';\n  }\n}\n\nexport class ForbiddenResponseError extends EndpointResponseError {\n  constructor(message: string, response: Response) {\n    super(message, response);\n    this.type = 'ForbiddenResponseError';\n  }\n}\n\n/**\n * An object, containing all data for the particular validation error.\n */\nexport class ValidationErrorData {\n  /**\n   * The validation error message.\n   */\n  message: string;\n\n  /**\n   * The parameter name that caused the validation error.\n   */\n  parameterName?: string;\n\n  /**\n   * Validator original message\n   */\n  validatorMessage?: string;\n\n  /**\n   * @param message - The `message` property value\n   * @param parameterName - The `parameterName` property value\n   * @param validatorMessage - The `validatorMessage` property value\n   */\n  constructor(message: string, parameterName?: string, validatorMessage?: string) {\n    this.message = message;\n    this.parameterName = parameterName;\n    this.validatorMessage = validatorMessage;\n  }\n}\n"],"version":3}